{
  "endpoints": [
    {
      "name": "GetAccount",
      "group": "Accounts",
      "schema": {
        "title": "Endpoint Arguments",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "args": {
            "id": "endpoint_7C26ABBCDB1F9",
            "title": "endpoint_7C26ABBCDB1F9",
            "type": "object",
            "properties": {
              "AccountId": {
                "description": "A unique identifier used to identify the account resource.",
                "type": "string"
              },
              "x-fapi-auth-date": {
                "description": "The time when the Customer last logged in with the Third Party.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC; **Constraints**: *Pattern*: ```` ^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$ ````",
                "type": "string",
                "pattern": "^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$"
              },
              "x-fapi-customer-ip-address": {
                "description": "The Customer's IP address if the Customer is currently logged in with the Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-fapi-interaction-id": {
                "description": "An RFC4122 UID used as a correlation id.",
                "type": "string"
              },
              "x-merchant-ip-address": {
                "description": "The IP address of the merchant when making account information requests through a Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-customer-user-agent": {
                "description": "The User-Agent of the application on the customer device that is used to make the account information request",
                "type": "string"
              }
            },
            "required": [
              "AccountId"
            ]
          }
        },
        "required": [
          "args"
        ]
      }
    },
    {
      "name": "GetAccounts",
      "group": "Accounts",
      "schema": {
        "title": "Endpoint Arguments",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "args": {
            "id": "endpoint_7C26ABBCDB1F9",
            "title": "endpoint_7C26ABBCDB1F9",
            "type": "object",
            "properties": {
              "x-fapi-auth-date": {
                "description": "The time when the Customer last logged in with the Third Party.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC; **Constraints**: *Pattern*: ```` ^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$ ````",
                "type": "string",
                "pattern": "^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$"
              },
              "x-fapi-customer-ip-address": {
                "description": "The Customer's IP address if the Customer is currently logged in with the Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-fapi-interaction-id": {
                "description": "An RFC4122 UID used as a correlation id.",
                "type": "string"
              },
              "x-merchant-ip-address": {
                "description": "The IP address of the merchant when making account information requests through a Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-customer-user-agent": {
                "description": "The User-Agent of the application on the customer device that is used to make the account information request",
                "type": "string"
              }
            }
          }
        },
        "required": [
          "args"
        ]
      }
    },
    {
      "name": "GetBalances",
      "group": "Balances",
      "schema": {
        "title": "Endpoint Arguments",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "args": {
            "id": "endpoint_7C26ABBCDB1F9",
            "title": "endpoint_7C26ABBCDB1F9",
            "type": "object",
            "properties": {
              "x-fapi-auth-date": {
                "description": "The time when the Customer last logged in with the Third Party.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC; **Constraints**: *Pattern*: ```` ^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$ ````",
                "type": "string",
                "pattern": "^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$"
              },
              "x-fapi-customer-ip-address": {
                "description": "The Customer's IP address if the Customer is currently logged in with the Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-fapi-interaction-id": {
                "description": "An RFC4122 UID used as a correlation id.",
                "type": "string"
              },
              "x-merchant-ip-address": {
                "description": "The IP address of the merchant when making account information requests through a Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-customer-user-agent": {
                "description": "The User-Agent of the application on the customer device that is used to make the account information request",
                "type": "string"
              }
            }
          }
        },
        "required": [
          "args"
        ]
      }
    },
    {
      "name": "GetAccountBalances",
      "group": "Balances",
      "schema": {
        "title": "Endpoint Arguments",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "args": {
            "id": "endpoint_7C26ABBCDB1F9",
            "title": "endpoint_7C26ABBCDB1F9",
            "type": "object",
            "properties": {
              "AccountId": {
                "description": "A unique identifier used to identify the account resource.",
                "type": "string"
              },
              "x-fapi-auth-date": {
                "description": "The time when the Customer last logged in with the Third Party.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC; **Constraints**: *Pattern*: ```` ^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$ ````",
                "type": "string",
                "pattern": "^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$"
              },
              "x-fapi-customer-ip-address": {
                "description": "The Customer's IP address if the Customer is currently logged in with the Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-fapi-interaction-id": {
                "description": "An RFC4122 UID used as a correlation id.",
                "type": "string"
              },
              "x-merchant-ip-address": {
                "description": "The IP address of the merchant when making account information requests through a Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-customer-user-agent": {
                "description": "The User-Agent of the application on the customer device that is used to make the account information request",
                "type": "string"
              }
            },
            "required": [
              "AccountId"
            ]
          }
        },
        "required": [
          "args"
        ]
      }
    },
    {
      "name": "GetAccountBeneficiaries",
      "group": "Beneficiaries",
      "schema": {
        "title": "Endpoint Arguments",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "args": {
            "id": "endpoint_7C26ABBCDB1F9",
            "title": "endpoint_7C26ABBCDB1F9",
            "type": "object",
            "properties": {
              "AccountId": {
                "description": "A unique identifier used to identify the account resource.",
                "type": "string"
              },
              "x-fapi-auth-date": {
                "description": "The time when the Customer last logged in with the Third Party.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC; **Constraints**: *Pattern*: ```` ^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$ ````",
                "type": "string",
                "pattern": "^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$"
              },
              "x-fapi-customer-ip-address": {
                "description": "The Customer's IP address if the Customer is currently logged in with the Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-fapi-interaction-id": {
                "description": "An RFC4122 UID used as a correlation id.",
                "type": "string"
              },
              "x-merchant-ip-address": {
                "description": "The IP address of the merchant when making account information requests through a Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-customer-user-agent": {
                "description": "The User-Agent of the application on the customer device that is used to make the account information request",
                "type": "string"
              }
            },
            "required": [
              "AccountId"
            ]
          }
        },
        "required": [
          "args"
        ]
      }
    },
    {
      "name": "GetBeneficiaries",
      "group": "Beneficiaries",
      "schema": {
        "title": "Endpoint Arguments",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "args": {
            "id": "endpoint_7C26ABBCDB1F9",
            "title": "endpoint_7C26ABBCDB1F9",
            "type": "object",
            "properties": {
              "x-fapi-auth-date": {
                "description": "The time when the Customer last logged in with the Third Party.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC; **Constraints**: *Pattern*: ```` ^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$ ````",
                "type": "string",
                "pattern": "^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$"
              },
              "x-fapi-customer-ip-address": {
                "description": "The Customer's IP address if the Customer is currently logged in with the Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-fapi-interaction-id": {
                "description": "An RFC4122 UID used as a correlation id.",
                "type": "string"
              },
              "x-merchant-ip-address": {
                "description": "The IP address of the merchant when making account information requests through a Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-customer-user-agent": {
                "description": "The User-Agent of the application on the customer device that is used to make the account information request",
                "type": "string"
              }
            }
          }
        },
        "required": [
          "args"
        ]
      }
    },
    {
      "name": "GetAccountDirectDebits",
      "group": "Direct Debits",
      "schema": {
        "title": "Endpoint Arguments",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "args": {
            "id": "endpoint_7C26ABBCDB1F9",
            "title": "endpoint_7C26ABBCDB1F9",
            "type": "object",
            "properties": {
              "AccountId": {
                "description": "A unique identifier used to identify the account resource.",
                "type": "string"
              },
              "x-fapi-auth-date": {
                "description": "The time when the Customer last logged in with the Third Party.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC; **Constraints**: *Pattern*: ```` ^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$ ````",
                "type": "string",
                "pattern": "^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$"
              },
              "x-fapi-customer-ip-address": {
                "description": "The Customer's IP address if the Customer is currently logged in with the Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-fapi-interaction-id": {
                "description": "An RFC4122 UID used as a correlation id.",
                "type": "string"
              },
              "x-merchant-ip-address": {
                "description": "The IP address of the merchant when making account information requests through a Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-customer-user-agent": {
                "description": "The User-Agent of the application on the customer device that is used to make the account information request",
                "type": "string"
              }
            },
            "required": [
              "AccountId"
            ]
          }
        },
        "required": [
          "args"
        ]
      }
    },
    {
      "name": "GetDirectDebits",
      "group": "Direct Debits",
      "schema": {
        "title": "Endpoint Arguments",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "args": {
            "id": "endpoint_7C26ABBCDB1F9",
            "title": "endpoint_7C26ABBCDB1F9",
            "type": "object",
            "properties": {
              "x-fapi-auth-date": {
                "description": "The time when the Customer last logged in with the Third Party.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC; **Constraints**: *Pattern*: ```` ^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$ ````",
                "type": "string",
                "pattern": "^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$"
              },
              "x-fapi-customer-ip-address": {
                "description": "The Customer's IP address if the Customer is currently logged in with the Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-fapi-interaction-id": {
                "description": "An RFC4122 UID used as a correlation id.",
                "type": "string"
              },
              "x-merchant-ip-address": {
                "description": "The IP address of the merchant when making account information requests through a Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-customer-user-agent": {
                "description": "The User-Agent of the application on the customer device that is used to make the account information request",
                "type": "string"
              }
            }
          }
        },
        "required": [
          "args"
        ]
      }
    },
    {
      "name": "GetAccountOffers",
      "group": "Offers",
      "schema": {
        "title": "Endpoint Arguments",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "args": {
            "id": "endpoint_7C26ABBCDB1F9",
            "title": "endpoint_7C26ABBCDB1F9",
            "type": "object",
            "properties": {
              "AccountId": {
                "description": "A unique identifier used to identify the account resource.",
                "type": "string"
              },
              "x-fapi-auth-date": {
                "description": "The time when the Customer last logged in with the Third Party.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC; **Constraints**: *Pattern*: ```` ^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$ ````",
                "type": "string",
                "pattern": "^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$"
              },
              "x-fapi-customer-ip-address": {
                "description": "The Customer's IP address if the Customer is currently logged in with the Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-fapi-interaction-id": {
                "description": "An RFC4122 UID used as a correlation id.",
                "type": "string"
              },
              "x-merchant-ip-address": {
                "description": "The IP address of the merchant when making account information requests through a Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-customer-user-agent": {
                "description": "The User-Agent of the application on the customer device that is used to make the account information request",
                "type": "string"
              }
            },
            "required": [
              "AccountId"
            ]
          }
        },
        "required": [
          "args"
        ]
      }
    },
    {
      "name": "GetOffers",
      "group": "Offers",
      "schema": {
        "title": "Endpoint Arguments",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "args": {
            "id": "endpoint_7C26ABBCDB1F9",
            "title": "endpoint_7C26ABBCDB1F9",
            "type": "object",
            "properties": {
              "x-fapi-auth-date": {
                "description": "The time when the Customer last logged in with the Third Party.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC; **Constraints**: *Pattern*: ```` ^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$ ````",
                "type": "string",
                "pattern": "^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$"
              },
              "x-fapi-customer-ip-address": {
                "description": "The Customer's IP address if the Customer is currently logged in with the Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-fapi-interaction-id": {
                "description": "An RFC4122 UID used as a correlation id.",
                "type": "string"
              },
              "x-merchant-ip-address": {
                "description": "The IP address of the merchant when making account information requests through a Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-customer-user-agent": {
                "description": "The User-Agent of the application on the customer device that is used to make the account information request",
                "type": "string"
              }
            }
          }
        },
        "required": [
          "args"
        ]
      }
    },
    {
      "name": "GetAccountParty",
      "group": "Party",
      "schema": {
        "title": "Endpoint Arguments",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "args": {
            "id": "endpoint_7C26ABBCDB1F9",
            "title": "endpoint_7C26ABBCDB1F9",
            "type": "object",
            "properties": {
              "AccountId": {
                "description": "A unique identifier used to identify the account resource.",
                "type": "string"
              },
              "x-fapi-auth-date": {
                "description": "The time when the Customer last logged in with the Third Party.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC; **Constraints**: *Pattern*: ```` ^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$ ````",
                "type": "string",
                "pattern": "^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$"
              },
              "x-fapi-customer-ip-address": {
                "description": "The Customer's IP address if the Customer is currently logged in with the Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-fapi-interaction-id": {
                "description": "An RFC4122 UID used as a correlation id.",
                "type": "string"
              },
              "x-merchant-ip-address": {
                "description": "The IP address of the merchant when making account information requests through a Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-customer-user-agent": {
                "description": "The User-Agent of the application on the customer device that is used to make the account information request",
                "type": "string"
              }
            },
            "required": [
              "AccountId"
            ]
          }
        },
        "required": [
          "args"
        ]
      }
    },
    {
      "name": "GetParty",
      "group": "Party",
      "schema": {
        "title": "Endpoint Arguments",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "args": {
            "id": "endpoint_7C26ABBCDB1F9",
            "title": "endpoint_7C26ABBCDB1F9",
            "type": "object",
            "properties": {
              "x-fapi-auth-date": {
                "description": "The time when the Customer last logged in with the Third Party.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC; **Constraints**: *Pattern*: ```` ^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$ ````",
                "type": "string",
                "pattern": "^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$"
              },
              "x-fapi-customer-ip-address": {
                "description": "The Customer's IP address if the Customer is currently logged in with the Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-fapi-interaction-id": {
                "description": "An RFC4122 UID used as a correlation id.",
                "type": "string"
              },
              "x-merchant-ip-address": {
                "description": "The IP address of the merchant when making account information requests through a Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-customer-user-agent": {
                "description": "The User-Agent of the application on the customer device that is used to make the account information request",
                "type": "string"
              }
            }
          }
        },
        "required": [
          "args"
        ]
      }
    },
    {
      "name": "GetAccountScheduledPayments",
      "group": "Scheduled Payments",
      "schema": {
        "title": "Endpoint Arguments",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "args": {
            "id": "endpoint_7C26ABBCDB1F9",
            "title": "endpoint_7C26ABBCDB1F9",
            "type": "object",
            "properties": {
              "AccountId": {
                "description": "A unique identifier used to identify the account resource.",
                "type": "string"
              },
              "x-fapi-auth-date": {
                "description": "The time when the Customer last logged in with the Third Party.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC; **Constraints**: *Pattern*: ```` ^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$ ````",
                "type": "string",
                "pattern": "^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$"
              },
              "x-fapi-customer-ip-address": {
                "description": "The Customer's IP address if the Customer is currently logged in with the Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-fapi-interaction-id": {
                "description": "An RFC4122 UID used as a correlation id.",
                "type": "string"
              },
              "x-merchant-ip-address": {
                "description": "The IP address of the merchant when making account information requests through a Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-customer-user-agent": {
                "description": "The User-Agent of the application on the customer device that is used to make the account information request",
                "type": "string"
              }
            },
            "required": [
              "AccountId"
            ]
          }
        },
        "required": [
          "args"
        ]
      }
    },
    {
      "name": "GetScheduledPayments",
      "group": "Scheduled Payments",
      "schema": {
        "title": "Endpoint Arguments",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "args": {
            "id": "endpoint_7C26ABBCDB1F9",
            "title": "endpoint_7C26ABBCDB1F9",
            "type": "object",
            "properties": {
              "x-fapi-auth-date": {
                "description": "The time when the Customer last logged in with the Third Party.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC; **Constraints**: *Pattern*: ```` ^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$ ````",
                "type": "string",
                "pattern": "^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$"
              },
              "x-fapi-customer-ip-address": {
                "description": "The Customer's IP address if the Customer is currently logged in with the Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-fapi-interaction-id": {
                "description": "An RFC4122 UID used as a correlation id.",
                "type": "string"
              },
              "x-merchant-ip-address": {
                "description": "The IP address of the merchant when making account information requests through a Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-customer-user-agent": {
                "description": "The User-Agent of the application on the customer device that is used to make the account information request",
                "type": "string"
              }
            }
          }
        },
        "required": [
          "args"
        ]
      }
    },
    {
      "name": "GetAccountStandingOrders",
      "group": "Standing Orders",
      "schema": {
        "title": "Endpoint Arguments",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "args": {
            "id": "endpoint_7C26ABBCDB1F9",
            "title": "endpoint_7C26ABBCDB1F9",
            "type": "object",
            "properties": {
              "AccountId": {
                "description": "A unique identifier used to identify the account resource.",
                "type": "string"
              },
              "x-fapi-auth-date": {
                "description": "The time when the Customer last logged in with the Third Party.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC; **Constraints**: *Pattern*: ```` ^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$ ````",
                "type": "string",
                "pattern": "^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$"
              },
              "x-fapi-customer-ip-address": {
                "description": "The Customer's IP address if the Customer is currently logged in with the Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-fapi-interaction-id": {
                "description": "An RFC4122 UID used as a correlation id.",
                "type": "string"
              },
              "x-merchant-ip-address": {
                "description": "The IP address of the merchant when making account information requests through a Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-customer-user-agent": {
                "description": "The User-Agent of the application on the customer device that is used to make the account information request",
                "type": "string"
              }
            },
            "required": [
              "AccountId"
            ]
          }
        },
        "required": [
          "args"
        ]
      }
    },
    {
      "name": "GetStandingOrders",
      "group": "Standing Orders",
      "schema": {
        "title": "Endpoint Arguments",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "args": {
            "id": "endpoint_7C26ABBCDB1F9",
            "title": "endpoint_7C26ABBCDB1F9",
            "type": "object",
            "properties": {
              "x-fapi-auth-date": {
                "description": "The time when the Customer last logged in with the Third Party.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC; **Constraints**: *Pattern*: ```` ^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$ ````",
                "type": "string",
                "pattern": "^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$"
              },
              "x-fapi-customer-ip-address": {
                "description": "The Customer's IP address if the Customer is currently logged in with the Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-fapi-interaction-id": {
                "description": "An RFC4122 UID used as a correlation id.",
                "type": "string"
              },
              "x-merchant-ip-address": {
                "description": "The IP address of the merchant when making account information requests through a Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-customer-user-agent": {
                "description": "The User-Agent of the application on the customer device that is used to make the account information request",
                "type": "string"
              }
            }
          }
        },
        "required": [
          "args"
        ]
      }
    },
    {
      "name": "GetAccountStatement",
      "group": "Statements",
      "schema": {
        "title": "Endpoint Arguments",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "args": {
            "id": "endpoint_7C26ABBCDB1F9",
            "title": "endpoint_7C26ABBCDB1F9",
            "type": "object",
            "properties": {
              "AccountId": {
                "description": "A unique identifier used to identify the account resource.",
                "type": "string"
              },
              "StatementId": {
                "description": "A unique identifier used to identify the statement resource.",
                "type": "string"
              },
              "fromStatementDateTime": {
                "description": "The UTC ISO 8601 Date Time to filter statements FROM NB Time component is optional - set to 00:00:00 for just Date. If the Date Time contains a timezone, the API Provider must ignore the timezone component.",
                "type": "string",
                "format": "date-time"
              },
              "toStatementDateTime": {
                "description": "The UTC ISO 8601 Date Time to filter statements TO NB Time component is optional - set to 00:00:00 for just Date. If the Date Time contains a timezone, the API Provider must ignore the timezone component.",
                "type": "string",
                "format": "date-time"
              },
              "x-fapi-auth-date": {
                "description": "The time when the Customer last logged in with the Third Party.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC; **Constraints**: *Pattern*: ```` ^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$ ````",
                "type": "string",
                "pattern": "^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$"
              },
              "x-fapi-customer-ip-address": {
                "description": "The Customer's IP address if the Customer is currently logged in with the Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-fapi-interaction-id": {
                "description": "An RFC4122 UID used as a correlation id.",
                "type": "string"
              },
              "x-merchant-ip-address": {
                "description": "The IP address of the merchant when making account information requests through a Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-customer-user-agent": {
                "description": "The User-Agent of the application on the customer device that is used to make the account information request",
                "type": "string"
              }
            },
            "required": [
              "AccountId",
              "StatementId"
            ]
          }
        },
        "required": [
          "args"
        ]
      }
    },
    {
      "name": "GetAccountStatementFile",
      "group": "Statements",
      "schema": {
        "title": "Endpoint Arguments",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "args": {
            "id": "endpoint_7C26ABBCDB1F9",
            "title": "endpoint_7C26ABBCDB1F9",
            "type": "object",
            "properties": {
              "AccountId": {
                "description": "A unique identifier used to identify the account resource.",
                "type": "string"
              },
              "StatementId": {
                "description": "A unique identifier used to identify the statement resource.",
                "type": "string"
              },
              "x-fapi-auth-date": {
                "description": "The time when the Customer last logged in with the Third Party.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC; **Constraints**: *Pattern*: ```` ^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$ ````",
                "type": "string",
                "pattern": "^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$"
              },
              "x-fapi-customer-ip-address": {
                "description": "The Customer's IP address if the Customer is currently logged in with the Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-fapi-interaction-id": {
                "description": "An RFC4122 UID used as a correlation id.",
                "type": "string"
              },
              "x-merchant-ip-address": {
                "description": "The IP address of the merchant when making account information requests through a Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-customer-user-agent": {
                "description": "The User-Agent of the application on the customer device that is used to make the account information request",
                "type": "string"
              },
              "Accept": {
                "description": "Use this to decide the type of response.",
                "type": "string"
              }
            },
            "required": [
              "AccountId",
              "StatementId"
            ]
          }
        },
        "required": [
          "args"
        ]
      }
    },
    {
      "name": "GetAccountStatementTransactions",
      "group": "Statements",
      "schema": {
        "title": "Endpoint Arguments",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "args": {
            "id": "endpoint_7C26ABBCDB1F9",
            "title": "endpoint_7C26ABBCDB1F9",
            "type": "object",
            "properties": {
              "AccountId": {
                "description": "A unique identifier used to identify the account resource.",
                "type": "string"
              },
              "StatementId": {
                "description": "A unique identifier used to identify the statement resource.",
                "type": "string"
              },
              "fromBookingDateTime": {
                "description": "The UTC ISO 8601 Date Time to filter transactions FROM NB Time component is optional - set to 00:00:00 for just Date. If the Date Time contains a timezone, the API Provider must ignore the timezone component.",
                "type": "string",
                "format": "date-time"
              },
              "toBookingDateTime": {
                "description": "The UTC ISO 8601 Date Time to filter transactions TO NB Time component is optional - set to 00:00:00 for just Date. If the Date Time contains a timezone, the API Provider must ignore the timezone component.",
                "type": "string",
                "format": "date-time"
              },
              "x-fapi-auth-date": {
                "description": "The time when the Customer last logged in with the Third Party.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC; **Constraints**: *Pattern*: ```` ^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$ ````",
                "type": "string",
                "pattern": "^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$"
              },
              "x-fapi-customer-ip-address": {
                "description": "The Customer's IP address if the Customer is currently logged in with the Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-fapi-interaction-id": {
                "description": "An RFC4122 UID used as a correlation id.",
                "type": "string"
              },
              "x-merchant-ip-address": {
                "description": "The IP address of the merchant when making account information requests through a Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-customer-user-agent": {
                "description": "The User-Agent of the application on the customer device that is used to make the account information request",
                "type": "string"
              }
            },
            "required": [
              "AccountId",
              "StatementId"
            ]
          }
        },
        "required": [
          "args"
        ]
      }
    },
    {
      "name": "GetAccountStatements",
      "group": "Statements",
      "schema": {
        "title": "Endpoint Arguments",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "args": {
            "id": "endpoint_7C26ABBCDB1F9",
            "title": "endpoint_7C26ABBCDB1F9",
            "type": "object",
            "properties": {
              "AccountId": {
                "description": "A unique identifier used to identify the account resource.",
                "type": "string"
              },
              "fromStatementDateTime": {
                "description": "The UTC ISO 8601 Date Time to filter statements FROM NB Time component is optional - set to 00:00:00 for just Date. If the Date Time contains a timezone, the API Provider must ignore the timezone component.",
                "type": "string",
                "format": "date-time"
              },
              "toStatementDateTime": {
                "description": "The UTC ISO 8601 Date Time to filter statements TO NB Time component is optional - set to 00:00:00 for just Date. If the Date Time contains a timezone, the API Provider must ignore the timezone component.",
                "type": "string",
                "format": "date-time"
              },
              "x-fapi-auth-date": {
                "description": "The time when the Customer last logged in with the Third Party.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC; **Constraints**: *Pattern*: ```` ^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$ ````",
                "type": "string",
                "pattern": "^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$"
              },
              "x-fapi-customer-ip-address": {
                "description": "The Customer's IP address if the Customer is currently logged in with the Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-fapi-interaction-id": {
                "description": "An RFC4122 UID used as a correlation id.",
                "type": "string"
              },
              "x-merchant-ip-address": {
                "description": "The IP address of the merchant when making account information requests through a Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-customer-user-agent": {
                "description": "The User-Agent of the application on the customer device that is used to make the account information request",
                "type": "string"
              }
            },
            "required": [
              "AccountId"
            ]
          }
        },
        "required": [
          "args"
        ]
      }
    },
    {
      "name": "GetStatements",
      "group": "Statements",
      "schema": {
        "title": "Endpoint Arguments",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "args": {
            "id": "endpoint_7C26ABBCDB1F9",
            "title": "endpoint_7C26ABBCDB1F9",
            "type": "object",
            "properties": {
              "fromStatementDateTime": {
                "description": "The UTC ISO 8601 Date Time to filter statements FROM NB Time component is optional - set to 00:00:00 for just Date. If the Date Time contains a timezone, the API Provider must ignore the timezone component.",
                "type": "string",
                "format": "date-time"
              },
              "toStatementDateTime": {
                "description": "The UTC ISO 8601 Date Time to filter statements TO NB Time component is optional - set to 00:00:00 for just Date. If the Date Time contains a timezone, the API Provider must ignore the timezone component.",
                "type": "string",
                "format": "date-time"
              },
              "x-fapi-auth-date": {
                "description": "The time when the Customer last logged in with the Third Party.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC; **Constraints**: *Pattern*: ```` ^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$ ````",
                "type": "string",
                "pattern": "^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$"
              },
              "x-fapi-customer-ip-address": {
                "description": "The Customer's IP address if the Customer is currently logged in with the Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-fapi-interaction-id": {
                "description": "An RFC4122 UID used as a correlation id.",
                "type": "string"
              },
              "x-merchant-ip-address": {
                "description": "The IP address of the merchant when making account information requests through a Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-customer-user-agent": {
                "description": "The User-Agent of the application on the customer device that is used to make the account information request",
                "type": "string"
              }
            }
          }
        },
        "required": [
          "args"
        ]
      }
    },
    {
      "name": "GetAccountTransactions",
      "group": "Transactions",
      "schema": {
        "title": "Endpoint Arguments",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "args": {
            "id": "endpoint_7C26ABBCDB1F9",
            "title": "endpoint_7C26ABBCDB1F9",
            "type": "object",
            "properties": {
              "AccountId": {
                "description": "A unique identifier used to identify the account resource.",
                "type": "string"
              },
              "fromBookingDateTime": {
                "description": "The UTC ISO 8601 Date Time to filter transactions FROM NB Time component is optional - set to 00:00:00 for just Date. If the Date Time contains a timezone, the API Provider must ignore the timezone component.",
                "type": "string",
                "format": "date-time"
              },
              "toBookingDateTime": {
                "description": "The UTC ISO 8601 Date Time to filter transactions TO NB Time component is optional - set to 00:00:00 for just Date. If the Date Time contains a timezone, the API Provider must ignore the timezone component.",
                "type": "string",
                "format": "date-time"
              },
              "x-fapi-auth-date": {
                "description": "The time when the Customer last logged in with the Third Party.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC; **Constraints**: *Pattern*: ```` ^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$ ````",
                "type": "string",
                "pattern": "^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$"
              },
              "x-fapi-customer-ip-address": {
                "description": "The Customer's IP address if the Customer is currently logged in with the Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-fapi-interaction-id": {
                "description": "An RFC4122 UID used as a correlation id.",
                "type": "string"
              },
              "x-merchant-ip-address": {
                "description": "The IP address of the merchant when making account information requests through a Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-customer-user-agent": {
                "description": "The User-Agent of the application on the customer device that is used to make the account information request",
                "type": "string"
              }
            },
            "required": [
              "AccountId"
            ]
          }
        },
        "required": [
          "args"
        ]
      }
    },
    {
      "name": "GetTransactions",
      "group": "Transactions",
      "schema": {
        "title": "Endpoint Arguments",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "args": {
            "id": "endpoint_7C26ABBCDB1F9",
            "title": "endpoint_7C26ABBCDB1F9",
            "type": "object",
            "properties": {
              "fromBookingDateTime": {
                "description": "The UTC ISO 8601 Date Time to filter transactions FROM NB Time component is optional - set to 00:00:00 for just Date. If the Date Time contains a timezone, the API Provider must ignore the timezone component.",
                "type": "string",
                "format": "date-time"
              },
              "toBookingDateTime": {
                "description": "The UTC ISO 8601 Date Time to filter transactions TO NB Time component is optional - set to 00:00:00 for just Date. If the Date Time contains a timezone, the API Provider must ignore the timezone component.",
                "type": "string",
                "format": "date-time"
              },
              "x-fapi-auth-date": {
                "description": "The time when the Customer last logged in with the Third Party.\nAll dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:\nSun, 10 Sep 2017 19:43:31 UTC; **Constraints**: *Pattern*: ```` ^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$ ````",
                "type": "string",
                "pattern": "^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$"
              },
              "x-fapi-customer-ip-address": {
                "description": "The Customer's IP address if the Customer is currently logged in with the Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-fapi-interaction-id": {
                "description": "An RFC4122 UID used as a correlation id.",
                "type": "string"
              },
              "x-merchant-ip-address": {
                "description": "The IP address of the merchant when making account information requests through a Third Party.; **Constraints**: *Pattern*: ```` ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ````",
                "type": "string",
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
              },
              "x-customer-user-agent": {
                "description": "The User-Agent of the application on the customer device that is used to make the account information request",
                "type": "string"
              }
            }
          }
        },
        "required": [
          "args"
        ]
      }
    }
  ],
  "modelSchemas": {
    "AccountModel": {
      "id": "AccountModel",
      "title": "AccountModel",
      "type": "object",
      "properties": {
        "AccountId": {
          "description": "A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.",
          "type": "string",
          "minLength": 1,
          "maxLength": 40
        },
        "Currency": {
          "description": "Identification of the currency in which the account is held.  Usage: Currency should only be used in case one and the same account number covers several currencies and the initiating party needs to identify which currency needs to be used for settlement on the account.",
          "type": "string",
          "pattern": "^[A-Z]{3,3}$"
        },
        "AccountType": {
          "$ref": "./schemaData.json#/modelSchemas/AccountType"
        },
        "AccountSubType": {
          "$ref": "./schemaData.json#/modelSchemas/AccountSubType"
        },
        "Description": {
          "description": "Specifies the description of the account type.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "Nickname": {
          "description": "The nickname of the account, assigned by the account owner in order to provide an additional means of identification of the account.",
          "type": "string",
          "minLength": 1,
          "maxLength": 70
        },
        "Account": {
          "$ref": "./schemaData.json#/modelSchemas/Account3"
        },
        "Servicer": {
          "$ref": "./schemaData.json#/modelSchemas/Servicer2"
        }
      },
      "required": [
        "AccountId",
        "Currency",
        "Nickname"
      ]
    },
    "Error": {
      "id": "Error",
      "title": "Error",
      "type": "object",
      "properties": {
        "ErrorCode": {
          "$ref": "./schemaData.json#/modelSchemas/ErrorCode"
        },
        "Message": {
          "description": "A free text description of the error that occurred. E.g., 'A mandatory field isn't supplied'.",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Path": {
          "description": "A recommended but optional reference to the JSON Path of the field with error, e.g., Data.Consent.InstructedAmount.Currency",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Url": {
          "description": "URL to help remediate the problem, provide more information or to API Reference.",
          "type": "string"
        }
      },
      "required": [
        "ErrorCode",
        "Message"
      ],
      "minProperties": 1
    },
    "AccountSchemeModel": {
      "title": "AccountSchemeModel",
      "x-enum-elements": [
        {
          "name": "BECSElectronicCredit",
          "description": ""
        },
        {
          "name": "MaskedCardNumber",
          "description": ""
        }
      ],
      "type": "string",
      "additionalProperties": false,
      "enum": [
        "BECSElectronicCredit",
        "MaskedCardNumber"
      ]
    },
    "AccountAccessConsentResponseModel": {
      "id": "AccountAccessConsentResponseModel",
      "title": "AccountAccessConsentResponseModel",
      "type": "object",
      "properties": {
        "ConsentId": {
          "description": "Unique identification as assigned to identify the account access consent.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Status": {
          "$ref": "./schemaData.json#/modelSchemas/Status"
        },
        "CreationDateTime": {
          "description": "Date and time at which the consent was created.\nAll dates in the JSON payloads are represented in ISO 8601 date-time format.\nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
          "type": "string",
          "format": "date-time"
        },
        "StatusUpdateDateTime": {
          "description": "Date and time at which the consent status was updated.\nAll dates in the JSON payloads are represented in ISO 8601 date-time format.\nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
          "type": "string",
          "format": "date-time"
        },
        "Consent": {
          "$ref": "./schemaData.json#/modelSchemas/Consent1"
        }
      },
      "required": [
        "ConsentId",
        "Status",
        "CreationDateTime",
        "StatusUpdateDateTime",
        "Consent"
      ]
    },
    "TransactionModel": {
      "id": "TransactionModel",
      "title": "TransactionModel",
      "type": "object",
      "properties": {
        "AccountId": {
          "description": "A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.",
          "type": "string",
          "minLength": 1,
          "maxLength": 40
        },
        "TransactionId": {
          "description": "Unique identifier for the transaction within an servicing institution. This identifier is both unique and immutable.",
          "type": "string",
          "minLength": 1,
          "maxLength": 40
        },
        "TransactionReference": {
          "$ref": "./schemaData.json#/modelSchemas/TransactionReference"
        },
        "StatementReference": {
          "description": "Unique reference for the statement. This reference may be optionally populated if available.",
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1,
            "maxLength": 35
          }
        },
        "Amount": {
          "$ref": "./schemaData.json#/modelSchemas/Amount10"
        },
        "CreditDebitIndicator": {
          "$ref": "./schemaData.json#/modelSchemas/CreditDebitIndicator1"
        },
        "Status": {
          "$ref": "./schemaData.json#/modelSchemas/Status1"
        },
        "BookingDateTime": {
          "description": "Date and time when a transaction entry is posted to an account on the account servicer's books. Usage: Booking date is the expected booking date, unless the status is booked, in which case it is the actual booking date.\nAll dates in the JSON payloads are represented in ISO 8601 date-time format.\nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
          "type": "string",
          "format": "date-time"
        },
        "ValueDateTime": {
          "description": "Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit entry.  Usage: If entry status is pending and value date is present, then the value date refers to an expected/requested value date. For entries subject to availability/float and for which availability information is provided, the value date must not be used. In this case the availability component identifies the  number of availability days.\nAll dates in the JSON payloads are represented in ISO 8601 date-time format.\nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
          "type": "string",
          "format": "date-time"
        },
        "AddressLine": {
          "description": "Information that locates and identifies a specific address, as defined by postal services, that is presented in free format text.",
          "type": "string",
          "minLength": 1,
          "maxLength": 70
        },
        "BankTransactionCode": {
          "$ref": "./schemaData.json#/modelSchemas/BankTransactionCode2"
        },
        "ProprietaryBankTransactionCode": {
          "$ref": "./schemaData.json#/modelSchemas/ProprietaryBankTransactionCode2"
        },
        "CurrencyExchange": {
          "$ref": "./schemaData.json#/modelSchemas/CurrencyExchange2"
        },
        "CreditorAgent": {
          "$ref": "./schemaData.json#/modelSchemas/CreditorAgent3"
        },
        "DebtorAgent": {
          "$ref": "./schemaData.json#/modelSchemas/DebtorAgent2"
        },
        "CardInstrument": {
          "$ref": "./schemaData.json#/modelSchemas/CardInstrument2"
        },
        "TransactionInformation": {
          "description": "Further details of the transaction. This is the transaction narrative, which is unstructured text.",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Balance": {
          "$ref": "./schemaData.json#/modelSchemas/Balance2"
        },
        "MerchantDetails": {
          "$ref": "./schemaData.json#/modelSchemas/MerchantDetails2"
        },
        "CreditorAccount": {
          "$ref": "./schemaData.json#/modelSchemas/CreditorAccount5"
        },
        "DebtorAccount": {
          "$ref": "./schemaData.json#/modelSchemas/DebtorAccount2"
        }
      },
      "required": [
        "AccountId",
        "Amount",
        "CreditDebitIndicator",
        "Status",
        "BookingDateTime"
      ]
    },
    "StandingOrderModel": {
      "id": "StandingOrderModel",
      "title": "StandingOrderModel",
      "type": "object",
      "properties": {
        "AccountId": {
          "description": "A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.",
          "type": "string",
          "minLength": 1,
          "maxLength": 40
        },
        "StandingOrderId": {
          "description": "A unique and immutable identifier used to identify the standing order resource. This identifier has no meaning to the account owner.",
          "type": "string",
          "minLength": 1,
          "maxLength": 40
        },
        "Frequency": {
          "description": "EvryDay - Every day\nEvryWorkgDay - Every working day\nIntrvlWkDay - An interval specified in weeks (01 to 09), and the day within the week (01 to 07)\nWkInMnthDay - A monthly interval, specifying the week of the month (01 to 05) and day within the week (01 to 07)\nIntrvlMnthDay - An interval specified in months (between 01 to 06, 12, 24), specifying the day within the month (-5 to -1, 1 to 31)\n\nPatterns:\nEvryDay (ScheduleCode)\nEvryWorkgDay (ScheduleCode)\nIntrvlWkDay:IntervalInWeeks:DayInWeek (ScheduleCode + IntervalInWeeks + DayInWeek)\nWkInMnthDay:WeekInMonth:DayInWeek (ScheduleCode + WeekInMonth + DayInWeek)\nIntrvlMnthDay:IntervalInMonths:DayInMonth (ScheduleCode + IntervalInMonths + DayInMonth)\n\nThe regular expression for this element combines five smaller versions for each permitted pattern. To aid legibility - the components are presented individually here:\nEvryDay\nEvryWorkgDay\nIntrvlWkDay:0[1-9]:0[1-7]\nWkInMnthDay:0[1-5]:0[1-7]\nIntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01])",
          "type": "string",
          "pattern": "^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$"
        },
        "Reference": {
          "$ref": "./schemaData.json#/modelSchemas/Reference"
        },
        "FirstPaymentDateTime": {
          "description": "The date on which the first payment for a Standing Order schedule will be made.\nAll dates in the JSON payloads are represented in ISO 8601 date-time format.\nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
          "type": "string",
          "format": "date-time"
        },
        "FirstPaymentAmount": {
          "$ref": "./schemaData.json#/modelSchemas/FirstPaymentAmount2"
        },
        "NextPaymentDateTime": {
          "description": "The date on which the next payment for a Standing Order schedule will be made.\nAll dates in the JSON payloads are represented in ISO 8601 date-time format.\nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
          "type": "string",
          "format": "date-time"
        },
        "NextPaymentAmount": {
          "$ref": "./schemaData.json#/modelSchemas/NextPaymentAmount2"
        },
        "FinalPaymentDateTime": {
          "description": "The date on which the final payment for a Standing Order schedule will be made.\nAll dates in the JSON payloads are represented in ISO 8601 date-time format.\nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
          "type": "string",
          "format": "date-time"
        },
        "FinalPaymentAmount": {
          "$ref": "./schemaData.json#/modelSchemas/FinalPaymentAmount2"
        },
        "StandingOrderStatusCode": {
          "$ref": "./schemaData.json#/modelSchemas/StandingOrderStatusCode"
        },
        "CreditorAgent": {
          "$ref": "./schemaData.json#/modelSchemas/CreditorAgent22"
        },
        "CreditorAccount": {
          "$ref": "./schemaData.json#/modelSchemas/CreditorAccount2"
        }
      },
      "required": [
        "AccountId",
        "Frequency",
        "NextPaymentDateTime",
        "NextPaymentAmount"
      ]
    },
    "Account": {
      "id": "Account",
      "title": "Account",
      "description": "Provides the details to identify an account.",
      "type": "object",
      "properties": {
        "SchemeName": {
          "$ref": "./schemaData.json#/modelSchemas/AccountSchemeModel"
        },
        "Identification": {
          "description": "Identification assigned by an institution to identify an account. This identification is known by the account owner.",
          "type": "string",
          "minLength": 1,
          "maxLength": 34
        },
        "Name": {
          "description": "Name of the account, as assigned by the account servicing institution, in agreement with the account owner in order to provide an additional means of identification of the account. Usage: The account name is different from the account owner name. The account name is used in certain user communities to provide a means of identifying the account, in addition to the account owner's identity and the account number.",
          "type": "string",
          "minLength": 1,
          "maxLength": 70
        },
        "SecondaryIdentification": {
          "description": "This is secondary identification of the account, as assigned by the account servicing institution.",
          "type": "string",
          "minLength": 1,
          "maxLength": 34
        }
      },
      "required": [
        "SchemeName",
        "Identification"
      ]
    },
    "AccountGETresponse1": {
      "id": "AccountGETresponse1",
      "title": "AccountGETresponse1",
      "type": "object",
      "properties": {
        "Data": {
          "$ref": "./schemaData.json#/modelSchemas/Data42"
        },
        "Links": {
          "$ref": "./schemaData.json#/modelSchemas/Links1"
        },
        "Meta": {
          "$ref": "./schemaData.json#/modelSchemas/Meta"
        }
      },
      "required": [
        "Data",
        "Links",
        "Meta"
      ]
    },
    "AccountType": {
      "title": "AccountType",
      "description": "Specifies the type of account (personal or business).",
      "x-enum-elements": [
        {
          "name": "Business",
          "description": ""
        },
        {
          "name": "Personal",
          "description": ""
        }
      ],
      "type": "string",
      "additionalProperties": false,
      "enum": [
        "Business",
        "Personal"
      ]
    },
    "Amount2": {
      "id": "Amount2",
      "title": "Amount2",
      "description": "Amount of money in the cash entry.",
      "type": "object",
      "properties": {
        "Amount": {
          "type": "string",
          "pattern": "^\\d{1,13}\\.\\d{1,5}$"
        },
        "Currency": {
          "description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 'Codes for the representation of currencies and funds'",
          "type": "string",
          "pattern": "^[A-Z]{3,3}$"
        }
      },
      "required": [
        "Amount",
        "Currency"
      ]
    },
    "Amount8": {
      "id": "Amount8",
      "title": "Amount8",
      "description": "Amount of money associated with the amount type.",
      "type": "object",
      "properties": {
        "Amount": {
          "type": "string",
          "pattern": "^\\d{1,13}\\.\\d{1,5}$"
        },
        "Currency": {
          "description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\".",
          "type": "string",
          "pattern": "^[A-Z]{3,3}$"
        }
      },
      "required": [
        "Amount",
        "Currency"
      ]
    },
    "Balance": {
      "id": "Balance",
      "title": "Balance",
      "description": "Set of elements used to define the balance as a numerical representation of the net increases and decreases in an account after a transaction entry is applied to the account.",
      "type": "object",
      "properties": {
        "Amount": {
          "$ref": "./schemaData.json#/modelSchemas/Amount10"
        },
        "CreditDebitIndicator": {
          "$ref": "./schemaData.json#/modelSchemas/CreditDebitIndicator"
        },
        "Type": {
          "$ref": "./schemaData.json#/modelSchemas/Type"
        }
      },
      "required": [
        "Amount",
        "CreditDebitIndicator",
        "Type"
      ]
    },
    "BalancesGETresponse": {
      "id": "BalancesGETresponse",
      "title": "BalancesGETresponse",
      "type": "object",
      "properties": {
        "Data": {
          "$ref": "./schemaData.json#/modelSchemas/Data52"
        },
        "Links": {
          "$ref": "./schemaData.json#/modelSchemas/Links1"
        },
        "Meta": {
          "$ref": "./schemaData.json#/modelSchemas/Meta"
        }
      },
      "required": [
        "Data",
        "Links",
        "Meta"
      ]
    },
    "ErrorResponse": {
      "id": "ErrorResponse",
      "title": "ErrorResponse",
      "description": "An array of detail error codes, and messages, and URLs to documentation to help remediation.",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Links": {
      "id": "Links",
      "title": "Links",
      "description": "Links relevant to the payload",
      "type": "object",
      "properties": {
        "Self": {
          "type": "string"
        },
        "First": {
          "type": "string"
        },
        "Prev": {
          "type": "string"
        },
        "Next": {
          "type": "string"
        },
        "Last": {
          "type": "string"
        }
      },
      "required": [
        "Self"
      ]
    },
    "Risk": {
      "id": "Risk",
      "title": "Risk",
      "description": "The Risk section is sent by the initiating party to the API Provider. It is used to specify additional details for risk scoring.",
      "type": "object",
      "properties": {
        "GeoLocation": {
          "$ref": "./schemaData.json#/modelSchemas/GeoLocation2"
        },
        "PaymentContextCode": {
          "$ref": "./schemaData.json#/modelSchemas/PaymentContextCode"
        },
        "MerchantCategoryCode": {
          "description": "Category code conforms to ISO 18245, related to the type of services or goods the merchant provides for the transaction",
          "type": "string",
          "minLength": 3,
          "maxLength": 4
        },
        "MerchantCustomerIdentification": {
          "description": "The unique customer identifier of the Customer with the merchant.",
          "type": "string",
          "minLength": 1,
          "maxLength": 70
        },
        "DeliveryAddress": {
          "$ref": "./schemaData.json#/modelSchemas/DeliveryAddress2"
        },
        "EndUserAppName": {
          "description": "Name of the end user facing application",
          "type": "string",
          "minLength": 1,
          "maxLength": 70
        },
        "EndUserAppVersion": {
          "description": "Version of the end user facing application",
          "type": "string",
          "minLength": 1,
          "maxLength": 14
        },
        "MerchantName": {
          "description": "Name of the merchant",
          "type": "string",
          "minLength": 1,
          "maxLength": 70
        },
        "MerchantNZBN": {
          "description": "NZ business number for the merchant",
          "type": "string",
          "minLength": 1,
          "maxLength": 70
        }
      }
    },
    "Consent": {
      "id": "Consent",
      "title": "Consent",
      "description": "Contains the requested consent",
      "type": "object",
      "properties": {
        "Permissions": {
          "description": "Specifies the Open Banking account access consent types. This is a list of the data clusters being consented by the Customer, and requested for authorisation with the API Provider.",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Permission"
          }
        },
        "ExpirationDateTime": {
          "description": "Specified date and time the permissions will expire. If this is not populated, the permissions will be open ended.\nAll dates in the JSON payloads are represented in ISO 8601 date-time format.\nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
          "type": "string",
          "format": "date-time"
        },
        "TransactionFromDateTime": {
          "description": "Specified start date and time for the transaction query period. If this is not populated, the start date will be open ended, and data will be returned from the earliest available transaction.\nAll dates in the JSON payloads are represented in ISO 8601 date-time format.\nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
          "type": "string",
          "format": "date-time"
        },
        "TransactionToDateTime": {
          "description": "Specified end date and time for the transaction query period. If this is not populated, the end date will be open ended, and data will be returned to the latest available transaction.\nAll dates in the JSON payloads are represented in ISO 8601 date-time format.\nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "Permissions"
      ]
    },
    "CreditLine": {
      "id": "CreditLine",
      "title": "CreditLine",
      "type": "object",
      "properties": {
        "Included": {
          "description": "Indicates whether or not the credit line is included in the balance of the account. Usage: If not present, credit line is not included in the balance amount of the account.",
          "type": "boolean"
        },
        "Amount": {
          "$ref": "./schemaData.json#/modelSchemas/Amount10"
        },
        "Type": {
          "$ref": "./schemaData.json#/modelSchemas/Type1"
        }
      },
      "required": [
        "Included"
      ]
    },
    "CreditorAccount": {
      "id": "CreditorAccount",
      "title": "CreditorAccount",
      "description": "Unambiguous identification of the account of the creditor, in the case of a debit transaction.",
      "type": "object",
      "properties": {
        "SchemeName": {
          "$ref": "./schemaData.json#/modelSchemas/AccountSchemeModel"
        },
        "Identification": {
          "description": "Identification assigned by an institution to identify an account. This identification is known by the account owner.",
          "type": "string",
          "minLength": 1,
          "maxLength": 34
        },
        "Name": {
          "description": "Name of the account, as assigned by the account servicing institution, in agreement with the account owner in order to provide an additional means of identification of the account.\nUsage: The account name is different from the account owner name. The account name is used in certain user communities to provide a means of identifying the account, in addition to the account owner's identity and the account number.",
          "type": "string",
          "minLength": 1,
          "maxLength": 70
        },
        "SecondaryIdentification": {
          "description": "This is secondary identification of the account, as assigned by the account servicing institution.",
          "type": "string",
          "minLength": 1,
          "maxLength": 34
        }
      },
      "required": [
        "SchemeName",
        "Identification"
      ]
    },
    "AccountAccessConsentModel": {
      "id": "AccountAccessConsentModel",
      "title": "AccountAccessConsentModel",
      "type": "object",
      "properties": {
        "Consent": {
          "$ref": "./schemaData.json#/modelSchemas/Consent1"
        }
      },
      "required": [
        "Consent"
      ]
    },
    "PartyModel": {
      "id": "PartyModel",
      "title": "PartyModel",
      "type": "object",
      "properties": {
        "PartyId": {
          "description": "A unique and immutable identifier used to identify the customer resource. This identifier has no meaning to the account owner.",
          "type": "string",
          "minLength": 1,
          "maxLength": 40
        },
        "PartyNumber": {
          "description": "Number assigned by an agent to identify its customer.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "PartyType": {
          "$ref": "./schemaData.json#/modelSchemas/PartyType"
        },
        "Name": {
          "description": "Name by which a party is known and which is usually used to identify that party.",
          "type": "string",
          "minLength": 1,
          "maxLength": 70
        },
        "EmailAddress": {
          "description": "Address for electronic mail (e-mail).",
          "type": "string",
          "minLength": 1,
          "maxLength": 256
        },
        "Phone": {
          "description": "Collection of information that identifies a phone number, as defined by telecom services.",
          "type": "string",
          "pattern": "\\+[0-9]{1,3}-[0-9()+\\-]{1,30}"
        },
        "Mobile": {
          "description": "Collection of information that identifies a mobile phone number, as defined by telecom services.",
          "type": "string",
          "pattern": "\\+[0-9]{1,3}-[0-9()+\\-]{1,30}"
        },
        "Address": {
          "description": "Postal address of a party.",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Address"
          }
        }
      },
      "required": [
        "PartyId"
      ]
    },
    "ScheduledPaymentModel": {
      "id": "ScheduledPaymentModel",
      "title": "ScheduledPaymentModel",
      "type": "object",
      "properties": {
        "AccountId": {
          "description": "A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.",
          "type": "string",
          "minLength": 1,
          "maxLength": 40
        },
        "ScheduledPaymentId": {
          "description": "A unique and immutable identifier used to identify the scheduled payment resource. This identifier has no meaning to the account owner.",
          "type": "string",
          "minLength": 1,
          "maxLength": 40
        },
        "ScheduledPaymentDateTime": {
          "description": "The date on which the scheduled payment will be made.\nAll dates in the JSON payloads are represented in ISO 8601 date-time format.\nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
          "type": "string",
          "format": "date-time"
        },
        "ScheduledType": {
          "$ref": "./schemaData.json#/modelSchemas/ScheduledType"
        },
        "InstructedAmount": {
          "$ref": "./schemaData.json#/modelSchemas/InstructedAmount12"
        },
        "Reference": {
          "$ref": "./schemaData.json#/modelSchemas/Reference"
        },
        "CreditorAgent": {
          "$ref": "./schemaData.json#/modelSchemas/CreditorAgent3"
        },
        "CreditorAccount": {
          "$ref": "./schemaData.json#/modelSchemas/CreditorAccount5"
        }
      },
      "required": [
        "AccountId",
        "ScheduledPaymentDateTime",
        "ScheduledType",
        "InstructedAmount"
      ]
    },
    "Address": {
      "id": "Address",
      "title": "Address",
      "description": "Postal address of a party.",
      "type": "object",
      "properties": {
        "AddressType": {
          "$ref": "./schemaData.json#/modelSchemas/AddressType1"
        },
        "AddressLine": {
          "description": "Information that locates and identifies a specific address, as defined by postal services, that is presented in free format text.",
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1,
            "maxLength": 70
          },
          "minItems": 0,
          "maxItems": 5
        },
        "StreetName": {
          "description": "Name of a street or thoroughfare.",
          "type": "string",
          "minLength": 1,
          "maxLength": 70
        },
        "BuildingNumber": {
          "description": "Number that identifies the position of a building on a street.",
          "type": "string",
          "minLength": 1,
          "maxLength": 16
        },
        "PostCode": {
          "description": "Identifier consisting of a group of letters and/or numbers that is added to a postal address to assist the sorting of mail.",
          "type": "string",
          "minLength": 1,
          "maxLength": 16
        },
        "TownName": {
          "description": "Name of a built-up area, with defined boundaries, and a local government.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "CountrySubDivision": {
          "description": "Identifies a subdivision of a country eg, state, region, county.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "Country": {
          "description": "Nation with its own government, occupying a particular territory.",
          "type": "string",
          "pattern": "^[A-Z]{2,2}$"
        }
      },
      "required": [
        "Country"
      ]
    },
    "Amount1": {
      "id": "Amount1",
      "title": "Amount1",
      "description": "Active Or Historic Currency Code and Amount",
      "type": "object",
      "properties": {
        "Amount": {
          "type": "string",
          "pattern": "^\\d{1,13}\\.\\d{1,5}$"
        },
        "Currency": {
          "description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 'Codes for the representation of currencies and funds'",
          "type": "string",
          "pattern": "^[A-Z]{3,3}$"
        }
      },
      "required": [
        "Amount",
        "Currency"
      ]
    },
    "Amount4": {
      "id": "Amount4",
      "title": "Amount4",
      "description": "Amount of money associated with the offer type.",
      "type": "object",
      "properties": {
        "Amount": {
          "type": "string",
          "pattern": "^\\d{1,13}\\.\\d{1,5}$"
        },
        "Currency": {
          "description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\".",
          "type": "string",
          "pattern": "^[A-Z]{3,3}$"
        }
      },
      "required": [
        "Amount",
        "Currency"
      ]
    },
    "CreditorAgent": {
      "id": "CreditorAgent",
      "title": "CreditorAgent",
      "description": "Financial institution servicing an account for the creditor.",
      "type": "object",
      "properties": {
        "SchemeName": {
          "description": "Name of the identification scheme, in a coded form as published in an external list.",
          "type": "string",
          "enum": [
            "BICFI"
          ]
        },
        "Identification": {
          "description": "Unique and unambiguous identification of a financial institution or a branch of a financial institution.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        }
      },
      "required": [
        "SchemeName",
        "Identification"
      ]
    },
    "CurrencyExchange": {
      "id": "CurrencyExchange",
      "title": "CurrencyExchange",
      "description": "Set of elements used to provide details on the currency exchange.",
      "type": "object",
      "properties": {
        "SourceCurrency": {
          "description": "Currency from which an amount is to be converted in a currency conversion.",
          "type": "string",
          "pattern": "^[A-Z]{3,3}$"
        },
        "TargetCurrency": {
          "description": "Currency from which an amount is to be converted in a currency conversion.",
          "type": "string",
          "pattern": "^[A-Z]{3,3}$"
        },
        "UnitCurrency": {
          "description": "Currency from which an amount is to be converted in a currency conversion.",
          "type": "string",
          "pattern": "^[A-Z]{3,3}$"
        },
        "ExchangeRate": {
          "description": "Factor used to convert an amount from one currency into another. This reflects the price at which one currency was bought with another currency.\nUsage: ExchangeRate expresses the ratio between UnitCurrency and QuotedCurrency (ExchangeRate = UnitCurrency/QuotedCurrency).",
          "type": "number"
        },
        "ContractIdentification": {
          "description": "Unique identification to unambiguously identify the foreign exchange contract.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "QuotationDate": {
          "description": "Date and time at which an exchange rate is quoted.\nAll dates in the JSON payloads are represented in ISO 8601 date-time format.\nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
          "type": "string",
          "format": "date-time"
        },
        "InstructedAmount": {
          "$ref": "./schemaData.json#/modelSchemas/InstructedAmount3"
        }
      },
      "required": [
        "SourceCurrency",
        "ExchangeRate"
      ]
    },
    "CreditDebitIndicator3": {
      "title": "CreditDebitIndicator3",
      "description": "Indicates whether the amount is a credit or a debit. Usage: A zero amount is considered to be a credit amount.",
      "x-enum-elements": [
        {
          "name": "Credit",
          "description": ""
        },
        {
          "name": "Debit",
          "description": ""
        }
      ],
      "type": "string",
      "additionalProperties": false,
      "enum": [
        "Credit",
        "Debit"
      ]
    },
    "Data1": {
      "id": "Data1",
      "title": "Data1",
      "description": "Data",
      "type": "object",
      "properties": {
        "Account": {
          "$ref": "./schemaData.json#/modelSchemas/AccountModel"
        }
      }
    },
    "Data4": {
      "id": "Data4",
      "title": "Data4",
      "description": "Data",
      "type": "object",
      "properties": {
        "Balance": {
          "description": "Balance",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/BalanceModel"
          }
        }
      },
      "required": [
        "Balance"
      ]
    },
    "BeneficiaryModel": {
      "id": "BeneficiaryModel",
      "title": "BeneficiaryModel",
      "type": "object",
      "properties": {
        "AccountId": {
          "description": "A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.",
          "type": "string",
          "minLength": 1,
          "maxLength": 40
        },
        "BeneficiaryId": {
          "description": "A unique and immutable identifier used to identify the beneficiary resource. This identifier has no meaning to the account owner.",
          "type": "string",
          "minLength": 1,
          "maxLength": 40
        },
        "Reference": {
          "$ref": "./schemaData.json#/modelSchemas/Reference"
        },
        "CreditorAgent": {
          "$ref": "./schemaData.json#/modelSchemas/CreditorAgent12"
        },
        "CreditorAccount": {
          "$ref": "./schemaData.json#/modelSchemas/CreditorAccount2"
        }
      },
      "required": [
        "AccountId"
      ]
    },
    "StatementModel": {
      "id": "StatementModel",
      "title": "StatementModel",
      "description": "Provides further details on a statement resource.",
      "type": "object",
      "properties": {
        "AccountId": {
          "description": "A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.",
          "type": "string",
          "minLength": 1,
          "maxLength": 40
        },
        "StatementId": {
          "description": "Unique identifier for the statement resource within an servicing institution. This identifier is both unique and immutable.",
          "type": "string",
          "minLength": 1,
          "maxLength": 40
        },
        "StatementReference": {
          "description": "Unique reference for the statement. This reference may be optionally populated if available.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "Type": {
          "$ref": "./schemaData.json#/modelSchemas/Type3"
        },
        "StartDateTime": {
          "description": "Date and time at which the statement period starts.\nAll dates in the JSON payloads are represented in ISO 8601 date-time format.\nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
          "type": "string",
          "format": "date-time"
        },
        "EndDateTime": {
          "description": "Date and time at which the statement period ends.\nAll dates in the JSON payloads are represented in ISO 8601 date-time format.\nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
          "type": "string",
          "format": "date-time"
        },
        "CreationDateTime": {
          "description": "Date and time at which the resource was created.\nAll dates in the JSON payloads are represented in ISO 8601 date-time format.\nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
          "type": "string",
          "format": "date-time"
        },
        "StatementDescription": {
          "description": "Other descriptions that may be available for the statement resource.",
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1,
            "maxLength": 500
          }
        },
        "StatementBenefit": {
          "description": "Set of elements used to provide details of a benefit or reward amount for the statement resource.",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/StatementBenefit"
          }
        },
        "StatementFee": {
          "description": "Set of elements used to provide details of a fee for the statement resource.",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/StatementFee"
          }
        },
        "StatementInterest": {
          "description": "Set of elements used to provide details of a generic interest amount related to the statement resource.",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/StatementInterest"
          }
        },
        "StatementDateTime": {
          "description": "Set of elements used to provide details of a generic date time for the statement resource.",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/StatementDateTime"
          }
        },
        "StatementRate": {
          "description": "Set of elements used to provide details of a generic rate related to the statement resource.",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/StatementRate"
          }
        },
        "StatementValue": {
          "description": "Set of elements used to provide details of a generic number value related to the statement resource.",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/StatementValue"
          }
        },
        "StatementAmount": {
          "description": "Set of elements used to provide details of a generic amount for the statement resource.",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/StatementAmount"
          }
        }
      },
      "required": [
        "AccountId",
        "Type",
        "StartDateTime",
        "EndDateTime",
        "CreationDateTime"
      ]
    },
    "BECSRemittance": {
      "id": "BECSRemittance",
      "title": "BECSRemittance",
      "description": "Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction. Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money. If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.\nNZ - Remittance information for use with BECS Electronic Credit payment scheme. The Particulars, Code and Reference fields are currently constrained by providers.  The design choice has been made not to constrain through schema restrictions, to allow for future changes that remove the constraint. Note that not all banks will accept all valid characters, in which case a descriptive 400 Bad Request will be returned. Constraining to a-z, A-Z, - (dash) and 0-9 is advised. One example is abc-XYZ-123",
      "type": "object",
      "properties": {
        "CreditorName": {
          "type": "string",
          "maxLength": 20
        },
        "CreditorReference": {
          "$ref": "./schemaData.json#/modelSchemas/CreditorReference"
        },
        "DebtorName": {
          "type": "string",
          "maxLength": 20
        },
        "DebtorReference": {
          "$ref": "./schemaData.json#/modelSchemas/CreditorReference"
        }
      },
      "required": [
        "CreditorName"
      ]
    },
    "MetaData": {
      "id": "MetaData",
      "title": "MetaData",
      "description": "Meta Data relevant to the payload",
      "type": "object",
      "properties": {
        "TotalPages": {
          "type": "integer",
          "format": "int32"
        },
        "FirstAvailableDateTime": {
          "description": "All dates in the JSON payloads are represented in ISO 8601 date-time format.\nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
          "type": "string",
          "format": "date-time"
        },
        "LastAvailableDateTime": {
          "description": "All dates in the JSON payloads are represented in ISO 8601 date-time format.\nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "AccountAccessConsentGETresponse": {
      "id": "AccountAccessConsentGETresponse",
      "title": "AccountAccessConsentGETresponse",
      "type": "object",
      "properties": {
        "Data": {
          "$ref": "./schemaData.json#/modelSchemas/AccountAccessConsentResponseModel"
        },
        "Risk": {
          "$ref": "./schemaData.json#/modelSchemas/Risk1"
        },
        "Links": {
          "$ref": "./schemaData.json#/modelSchemas/Links1"
        },
        "Meta": {
          "$ref": "./schemaData.json#/modelSchemas/Meta"
        }
      },
      "required": [
        "Data",
        "Risk",
        "Links",
        "Meta"
      ]
    },
    "AccountGETresponse": {
      "id": "AccountGETresponse",
      "title": "AccountGETresponse",
      "type": "object",
      "properties": {
        "Data": {
          "$ref": "./schemaData.json#/modelSchemas/Data32"
        },
        "Links": {
          "$ref": "./schemaData.json#/modelSchemas/Links1"
        },
        "Meta": {
          "$ref": "./schemaData.json#/modelSchemas/Meta"
        }
      },
      "required": [
        "Data",
        "Links",
        "Meta"
      ]
    },
    "AddressType1": {
      "title": "AddressType1",
      "description": "Identifies the nature of the postal address.",
      "x-enum-elements": [
        {
          "name": "Business",
          "description": ""
        },
        {
          "name": "Correspondence",
          "description": ""
        },
        {
          "name": "DeliveryTo",
          "description": ""
        },
        {
          "name": "MailTo",
          "description": ""
        },
        {
          "name": "POBox",
          "description": ""
        },
        {
          "name": "Postal",
          "description": ""
        },
        {
          "name": "Residential",
          "description": ""
        },
        {
          "name": "Statement",
          "description": ""
        }
      ],
      "type": "string",
      "additionalProperties": false,
      "enum": [
        "Business",
        "Correspondence",
        "DeliveryTo",
        "MailTo",
        "POBox",
        "Postal",
        "Residential",
        "Statement"
      ]
    },
    "Amount": {
      "id": "Amount",
      "title": "Amount",
      "description": "Amount of money of the cash balance.",
      "type": "object",
      "properties": {
        "Amount": {
          "type": "string",
          "pattern": "^\\d{1,13}\\.\\d{1,5}$"
        },
        "Currency": {
          "description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 'Codes for the representation of currencies and funds'",
          "type": "string",
          "pattern": "^[A-Z]{3,3}$"
        }
      },
      "required": [
        "Amount",
        "Currency"
      ]
    },
    "Amount6": {
      "id": "Amount6",
      "title": "Amount6",
      "description": "Amount of money associated with the statement fee type.",
      "type": "object",
      "properties": {
        "Amount": {
          "type": "string",
          "pattern": "^\\d{1,13}\\.\\d{1,5}$"
        },
        "Currency": {
          "description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\".",
          "type": "string",
          "pattern": "^[A-Z]{3,3}$"
        }
      },
      "required": [
        "Amount",
        "Currency"
      ]
    },
    "AuthorisationType": {
      "title": "AuthorisationType",
      "description": "The card authorisation type.",
      "x-enum-elements": [
        {
          "name": "Contactless",
          "description": ""
        },
        {
          "name": "None",
          "description": ""
        },
        {
          "name": "PIN",
          "description": ""
        }
      ],
      "type": "string",
      "additionalProperties": false,
      "enum": [
        "Contactless",
        "None",
        "PIN"
      ]
    },
    "BankTransactionCode": {
      "id": "BankTransactionCode",
      "title": "BankTransactionCode",
      "description": "Set of elements used to fully identify the type of underlying transaction resulting in an entry.",
      "type": "object",
      "properties": {
        "Code": {
          "description": "Specifies the family within a domain.",
          "type": "string"
        },
        "SubCode": {
          "description": "Specifies the sub-product family within a specific family.",
          "type": "string"
        }
      },
      "required": [
        "Code",
        "SubCode"
      ]
    },
    "BeneficiariesGETresponse": {
      "id": "BeneficiariesGETresponse",
      "title": "BeneficiariesGETresponse",
      "type": "object",
      "properties": {
        "Data": {
          "$ref": "./schemaData.json#/modelSchemas/Data62"
        },
        "Links": {
          "$ref": "./schemaData.json#/modelSchemas/Links1"
        },
        "Meta": {
          "$ref": "./schemaData.json#/modelSchemas/Meta"
        }
      },
      "required": [
        "Data",
        "Links",
        "Meta"
      ]
    },
    "CreditDebitIndicator1": {
      "title": "CreditDebitIndicator1",
      "description": "Indicates whether the transaction is a credit or a debit entry.",
      "x-enum-elements": [
        {
          "name": "Credit",
          "description": ""
        },
        {
          "name": "Debit",
          "description": ""
        }
      ],
      "type": "string",
      "additionalProperties": false,
      "enum": [
        "Credit",
        "Debit"
      ]
    },
    "CreditorAgent2": {
      "id": "CreditorAgent2",
      "title": "CreditorAgent2",
      "description": "Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account. This is the servicer of the beneficiary account",
      "type": "object",
      "properties": {
        "SchemeName": {
          "description": "Name of the identification scheme, in a coded form as published in an external list.",
          "type": "string",
          "enum": [
            "BICFI"
          ]
        },
        "Identification": {
          "description": "Unique and unambiguous identification of the servicing institution.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        }
      },
      "required": [
        "SchemeName",
        "Identification"
      ]
    },
    "CreditorReference": {
      "id": "CreditorReference",
      "title": "CreditorReference",
      "type": "object",
      "properties": {
        "Particulars": {
          "type": "string",
          "maxLength": 12
        },
        "Code": {
          "type": "string",
          "maxLength": 12
        },
        "Reference": {
          "type": "string",
          "maxLength": 12
        }
      }
    },
    "BalanceModel": {
      "id": "BalanceModel",
      "title": "BalanceModel",
      "description": "Balance object schema",
      "type": "object",
      "properties": {
        "AccountId": {
          "description": "A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.",
          "type": "string",
          "minLength": 1,
          "maxLength": 40
        },
        "Amount": {
          "$ref": "./schemaData.json#/modelSchemas/Amount10"
        },
        "CreditDebitIndicator": {
          "$ref": "./schemaData.json#/modelSchemas/CreditDebitIndicator"
        },
        "Type": {
          "$ref": "./schemaData.json#/modelSchemas/Type"
        },
        "DateTime": {
          "description": "Indicates the date (and time) of the balance.\nAll dates in the JSON payloads are represented in ISO 8601 date-time format.\nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
          "type": "string",
          "format": "date-time"
        },
        "CreditLine": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/CreditLine"
          }
        }
      },
      "required": [
        "AccountId",
        "Amount",
        "CreditDebitIndicator",
        "Type",
        "DateTime"
      ]
    },
    "DirectDebitModel": {
      "id": "DirectDebitModel",
      "title": "DirectDebitModel",
      "type": "object",
      "properties": {
        "AccountId": {
          "description": "A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.",
          "type": "string",
          "minLength": 1,
          "maxLength": 40
        },
        "DirectDebitId": {
          "description": "A unique and immutable identifier used to identify the direct debit resource. This identifier has no meaning to the account owner.",
          "type": "string",
          "minLength": 1,
          "maxLength": 40
        },
        "MandateIdentification": {
          "description": "Direct Debit reference.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "DirectDebitStatusCode": {
          "$ref": "./schemaData.json#/modelSchemas/DirectDebitStatusCode"
        },
        "Name": {
          "description": "Name of Service User",
          "type": "string",
          "minLength": 1,
          "maxLength": 70
        },
        "PreviousPaymentDateTime": {
          "description": "Date of most recent direct debit collection.\nAll dates in the JSON payloads are represented in ISO 8601 date-time format.\nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
          "type": "string",
          "format": "date-time"
        },
        "PreviousPaymentAmount": {
          "$ref": "./schemaData.json#/modelSchemas/PreviousPaymentAmount2"
        }
      },
      "required": [
        "AccountId",
        "MandateIdentification",
        "Name"
      ]
    },
    "OfferModel": {
      "id": "OfferModel",
      "title": "OfferModel",
      "type": "object",
      "properties": {
        "AccountId": {
          "description": "A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.",
          "type": "string",
          "minLength": 1,
          "maxLength": 40
        },
        "OfferId": {
          "description": "A unique and immutable identifier used to identify the offer resource. This identifier has no meaning to the account owner.",
          "type": "string",
          "minLength": 1,
          "maxLength": 40
        },
        "OfferType": {
          "$ref": "./schemaData.json#/modelSchemas/OfferType"
        },
        "Description": {
          "description": "Further details of the offer.",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "StartDateTime": {
          "description": "Date and time at which the offer starts.\nAll dates in the JSON payloads are represented in ISO 8601 date-time format.\nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
          "type": "string",
          "format": "date-time"
        },
        "EndDateTime": {
          "description": "Date and time at which the offer ends.\nAll dates in the JSON payloads are represented in ISO 8601 date-time format.\nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
          "type": "string",
          "format": "date-time"
        },
        "Amount": {
          "$ref": "./schemaData.json#/modelSchemas/Amount42"
        },
        "Fee": {
          "$ref": "./schemaData.json#/modelSchemas/Fee2"
        },
        "Rate": {
          "description": "Rate associated with the offer type.",
          "type": "string",
          "minLength": 1,
          "maxLength": 10,
          "pattern": "^(-?\\d{1,3}){1}(\\.\\d{1,4}){0,1}$"
        },
        "Value": {
          "description": "Value associated with the offer type.",
          "type": "integer",
          "format": "int32"
        },
        "Term": {
          "description": "Further details of the term of the offer.",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "URL": {
          "description": "URL (Uniform Resource Locator) where the document can be found",
          "type": "string",
          "minLength": 1,
          "maxLength": 256
        }
      },
      "required": [
        "AccountId"
      ]
    },
    "AccountAccessConsent": {
      "id": "AccountAccessConsent",
      "title": "AccountAccessConsent",
      "type": "object",
      "properties": {
        "Data": {
          "$ref": "./schemaData.json#/modelSchemas/AccountAccessConsentModel"
        },
        "Risk": {
          "$ref": "./schemaData.json#/modelSchemas/Risk1"
        }
      },
      "required": [
        "Data",
        "Risk"
      ]
    },
    "AccountAccessConsentPOSTresponse": {
      "id": "AccountAccessConsentPOSTresponse",
      "title": "AccountAccessConsentPOSTresponse",
      "type": "object",
      "properties": {
        "Data": {
          "$ref": "./schemaData.json#/modelSchemas/AccountAccessConsentResponseModel"
        },
        "Risk": {
          "$ref": "./schemaData.json#/modelSchemas/Risk1"
        },
        "Links": {
          "$ref": "./schemaData.json#/modelSchemas/Links1"
        },
        "Meta": {
          "$ref": "./schemaData.json#/modelSchemas/Meta"
        }
      },
      "required": [
        "Data",
        "Risk",
        "Links",
        "Meta"
      ]
    },
    "AccountSubType": {
      "title": "AccountSubType",
      "description": "Specifies the sub type of account (product family group).",
      "x-enum-elements": [
        {
          "name": "ChargeCard",
          "description": ""
        },
        {
          "name": "CreditCard",
          "description": ""
        },
        {
          "name": "CurrentAccount",
          "description": ""
        },
        {
          "name": "EMoney",
          "description": ""
        },
        {
          "name": "Loan",
          "description": ""
        },
        {
          "name": "Mortgage",
          "description": ""
        },
        {
          "name": "PrePaidCard",
          "description": ""
        },
        {
          "name": "Savings",
          "description": ""
        }
      ],
      "type": "string",
      "additionalProperties": false,
      "enum": [
        "ChargeCard",
        "CreditCard",
        "CurrentAccount",
        "EMoney",
        "Loan",
        "Mortgage",
        "PrePaidCard",
        "Savings"
      ]
    },
    "AddressType": {
      "title": "AddressType",
      "description": "Identifies the nature of the postal address.",
      "x-enum-elements": [
        {
          "name": "DeliveryTo",
          "description": ""
        }
      ],
      "type": "string",
      "additionalProperties": false,
      "enum": [
        "DeliveryTo"
      ]
    },
    "Amount3": {
      "id": "Amount3",
      "title": "Amount3",
      "description": "Amount of money of the cash balance after a transaction entry is applied to the account..",
      "type": "object",
      "properties": {
        "Amount": {
          "type": "string",
          "pattern": "^\\d{1,13}\\.\\d{1,5}$"
        },
        "Currency": {
          "description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 'Codes for the representation of currencies and funds'",
          "type": "string",
          "pattern": "^[A-Z]{3,3}$"
        }
      },
      "required": [
        "Amount",
        "Currency"
      ]
    },
    "Amount5": {
      "id": "Amount5",
      "title": "Amount5",
      "description": "Amount of money associated with the statement benefit type.",
      "type": "object",
      "properties": {
        "Amount": {
          "type": "string",
          "pattern": "^\\d{1,13}\\.\\d{1,5}$"
        },
        "Currency": {
          "description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\".",
          "type": "string",
          "pattern": "^[A-Z]{3,3}$"
        }
      },
      "required": [
        "Amount",
        "Currency"
      ]
    },
    "Amount7": {
      "id": "Amount7",
      "title": "Amount7",
      "description": "Amount of money associated with the statement interest amount type.",
      "type": "object",
      "properties": {
        "Amount": {
          "type": "string",
          "pattern": "^\\d{1,13}\\.\\d{1,5}$"
        },
        "Currency": {
          "description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\".",
          "type": "string",
          "pattern": "^[A-Z]{3,3}$"
        }
      },
      "required": [
        "Amount",
        "Currency"
      ]
    },
    "CardInstrument": {
      "id": "CardInstrument",
      "title": "CardInstrument",
      "description": "Set of elements to describe the card instrument used in the transaction.",
      "type": "object",
      "properties": {
        "CardSchemeName": {
          "$ref": "./schemaData.json#/modelSchemas/CardSchemeName"
        },
        "AuthorisationType": {
          "$ref": "./schemaData.json#/modelSchemas/AuthorisationType"
        },
        "Name": {
          "description": "Name of the cardholder using the card instrument.",
          "type": "string",
          "minLength": 1,
          "maxLength": 70
        },
        "Identification": {
          "description": "Identification assigned by an institution to identify the card instrument used in the transaction. This identification is known by the account owner, and may be masked.",
          "type": "string",
          "minLength": 1,
          "maxLength": 34
        }
      },
      "required": [
        "CardSchemeName"
      ]
    },
    "CardSchemeName": {
      "title": "CardSchemeName",
      "description": "Name of the card scheme.",
      "x-enum-elements": [
        {
          "name": "AmericanExpress",
          "description": ""
        },
        {
          "name": "Diners",
          "description": ""
        },
        {
          "name": "Discover",
          "description": ""
        },
        {
          "name": "MasterCard",
          "description": ""
        },
        {
          "name": "VISA",
          "description": ""
        }
      ],
      "type": "string",
      "additionalProperties": false,
      "enum": [
        "AmericanExpress",
        "Diners",
        "Discover",
        "MasterCard",
        "VISA"
      ]
    },
    "CreditDebitIndicator": {
      "title": "CreditDebitIndicator",
      "description": "Indicates whether the balance is a credit or a debit balance. Usage: A zero balance is considered to be a credit balance.",
      "x-enum-elements": [
        {
          "name": "Credit",
          "description": ""
        },
        {
          "name": "Debit",
          "description": ""
        }
      ],
      "type": "string",
      "additionalProperties": false,
      "enum": [
        "Credit",
        "Debit"
      ]
    },
    "CreditorAccount1": {
      "id": "CreditorAccount1",
      "title": "CreditorAccount1",
      "description": "Provides the details to identify the beneficiary account.",
      "type": "object",
      "properties": {
        "SchemeName": {
          "$ref": "./schemaData.json#/modelSchemas/AccountSchemeModel"
        },
        "Identification": {
          "description": "Identification assigned by an institution to identify an account. This identification is known by the account owner.",
          "type": "string",
          "minLength": 1,
          "maxLength": 34
        },
        "Name": {
          "description": "Name of the account, as assigned by the account servicing institution, in agreement with the account owner in order to provide an additional means of identification of the account. Usage: The account name is different from the account owner name. The account name is used in certain user communities to provide a means of identifying the account, in addition to the account owner's identity and the account number.",
          "type": "string",
          "minLength": 1,
          "maxLength": 70
        },
        "SecondaryIdentification": {
          "description": "This is secondary identification of the account, as assigned by the account servicing institution.",
          "type": "string",
          "minLength": 1,
          "maxLength": 34
        }
      },
      "required": [
        "SchemeName",
        "Identification"
      ]
    },
    "CreditorAccount3": {
      "id": "CreditorAccount3",
      "title": "CreditorAccount3",
      "description": "Provides the details to identify the beneficiary account.",
      "type": "object",
      "properties": {
        "SchemeName": {
          "$ref": "./schemaData.json#/modelSchemas/AccountSchemeModel"
        },
        "Identification": {
          "description": "Identification assigned by an institution to identify an account. This identification is known by the account owner.",
          "type": "string",
          "minLength": 1,
          "maxLength": 34
        },
        "Name": {
          "description": "Name of the account, as assigned by the account servicing institution, in agreement with the account owner in order to provide an additional means of identification of the account.\nUsage: The account name is different from the account owner name. The account name is used in certain user communities to provide a means of identifying the account, in addition to the account owner's identity and the account number.",
          "type": "string",
          "minLength": 1,
          "maxLength": 70
        },
        "SecondaryIdentification": {
          "description": "This is secondary identification of the account, as assigned by the account servicing institution.",
          "type": "string",
          "minLength": 1,
          "maxLength": 34
        }
      },
      "required": [
        "SchemeName",
        "Identification"
      ]
    },
    "CreditorAgent1": {
      "id": "CreditorAgent1",
      "title": "CreditorAgent1",
      "description": "Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.\nThis is the servicer of the beneficiary account.",
      "type": "object",
      "properties": {
        "SchemeName": {
          "$ref": "./schemaData.json#/modelSchemas/SchemeName"
        },
        "Identification": {
          "description": "Unique and unambiguous identification of the servicing institution.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "Name": {
          "description": "Name by which an agent is known and which is usually used to identify that agent.",
          "type": "string",
          "minLength": 1,
          "maxLength": 140
        },
        "PostalAddress": {
          "$ref": "./schemaData.json#/modelSchemas/PostalAddress2"
        }
      }
    },
    "Data": {
      "id": "Data",
      "title": "Data",
      "description": "Data",
      "type": "object",
      "properties": {
        "Account": {
          "description": "Account",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/AccountModel"
          }
        }
      }
    },
    "Data2": {
      "id": "Data2",
      "title": "Data2",
      "description": "Data",
      "type": "object",
      "properties": {
        "Transaction": {
          "description": "Transaction",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/TransactionModel"
          }
        }
      }
    },
    "Data3": {
      "id": "Data3",
      "title": "Data3",
      "description": "Data",
      "type": "object",
      "properties": {
        "Beneficiary": {
          "description": "Beneficiary",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/BeneficiaryModel"
          }
        }
      }
    },
    "Data6": {
      "id": "Data6",
      "title": "Data6",
      "description": "Data",
      "type": "object",
      "properties": {
        "StandingOrder": {
          "description": "StandingOrder",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/StandingOrderModel"
          }
        }
      }
    },
    "Data5": {
      "id": "Data5",
      "title": "Data5",
      "description": "Data",
      "type": "object",
      "properties": {
        "DirectDebit": {
          "description": "DirectDebit",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/DirectDebitModel"
          }
        }
      }
    },
    "Data10": {
      "id": "Data10",
      "title": "Data10",
      "type": "object",
      "properties": {
        "Statement": {
          "description": "Provides further details on a statement resource.",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/StatementModel"
          }
        }
      }
    },
    "Data21": {
      "id": "Data21",
      "title": "Data21",
      "type": "object",
      "properties": {
        "Statement": {
          "description": "Provides further details on a statement.",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/StatementModel"
          }
        }
      }
    },
    "DebtorReference": {
      "id": "DebtorReference",
      "title": "DebtorReference",
      "type": "object",
      "properties": {
        "Particulars": {
          "type": "string",
          "maxLength": 12
        },
        "Code": {
          "type": "string",
          "maxLength": 12
        },
        "Reference": {
          "type": "string",
          "maxLength": 12
        }
      }
    },
    "DirectDebitGETresponse": {
      "id": "DirectDebitGETresponse",
      "title": "DirectDebitGETresponse",
      "type": "object",
      "properties": {
        "Data": {
          "$ref": "./schemaData.json#/modelSchemas/Data13"
        },
        "Links": {
          "$ref": "./schemaData.json#/modelSchemas/Links1"
        },
        "Meta": {
          "$ref": "./schemaData.json#/modelSchemas/Meta"
        }
      },
      "required": [
        "Data",
        "Links",
        "Meta"
      ]
    },
    "ErrorCode": {
      "title": "ErrorCode",
      "description": "Low level textual error code.",
      "x-enum-elements": [
        {
          "name": "Enum_FieldExpected",
          "description": ""
        },
        {
          "name": "Enum_FieldInvalid",
          "description": ""
        },
        {
          "name": "Enum_FieldMissing",
          "description": ""
        },
        {
          "name": "Enum_FieldUnexpected",
          "description": ""
        },
        {
          "name": "Enum_HeaderInvalid",
          "description": ""
        },
        {
          "name": "Enum_HeaderMissing",
          "description": ""
        },
        {
          "name": "Enum_QueryParamInvalid",
          "description": ""
        },
        {
          "name": "Reauthenticate",
          "description": ""
        },
        {
          "name": "Reauthorise",
          "description": ""
        },
        {
          "name": "Enum_ResourceConsentCreditorAccount",
          "description": ""
        },
        {
          "name": "Enum_ResourceConsentDebtorAccount",
          "description": ""
        },
        {
          "name": "Enum_ResourceConsentExceedDataPermissions",
          "description": ""
        },
        {
          "name": "Enum_ResourceConsentExceedDates",
          "description": ""
        },
        {
          "name": "Enum_ResourceConsentExceedFrequency",
          "description": ""
        },
        {
          "name": "Enum_ResourceConsentExceedMaximumAmount",
          "description": ""
        },
        {
          "name": "Enum_ResourceConsentExceedTotalAmount",
          "description": ""
        },
        {
          "name": "Enum_ResourceConsentExceedTotalCount",
          "description": ""
        },
        {
          "name": "Enum_ResourceConsentExceedTransactionDates",
          "description": ""
        },
        {
          "name": "Enum_ResourceConsentInvalidStatus",
          "description": ""
        },
        {
          "name": "Enum_ResourceConsentMismatch",
          "description": ""
        },
        {
          "name": "Enum_ResourceInvalid",
          "description": ""
        },
        {
          "name": "UnexpectedError",
          "description": ""
        },
        {
          "name": "Enum_UnsupportedAccountIdentifier",
          "description": ""
        },
        {
          "name": "Enum_UnsupportedAccountSecondaryIdentifier",
          "description": ""
        },
        {
          "name": "Enum_UnsupportedCurrency",
          "description": ""
        },
        {
          "name": "Enum_UnsupportedScheme",
          "description": ""
        }
      ],
      "type": "string",
      "additionalProperties": false,
      "enum": [
        "Field.Expected",
        "Field.Invalid",
        "Field.Missing",
        "Field.Unexpected",
        "Header.Invalid",
        "Header.Missing",
        "QueryParam.Invalid",
        "Reauthenticate",
        "Reauthorise",
        "Resource.Consent.CreditorAccount",
        "Resource.Consent.DebtorAccount",
        "Resource.Consent.Exceed.DataPermissions",
        "Resource.Consent.Exceed.Dates",
        "Resource.Consent.Exceed.Frequency",
        "Resource.Consent.Exceed.MaximumAmount",
        "Resource.Consent.Exceed.TotalAmount",
        "Resource.Consent.Exceed.TotalCount",
        "Resource.Consent.Exceed.TransactionDates",
        "Resource.Consent.InvalidStatus",
        "Resource.Consent.Mismatch",
        "Resource.Invalid",
        "UnexpectedError",
        "Unsupported.AccountIdentifier",
        "Unsupported.AccountSecondaryIdentifier",
        "Unsupported.Currency",
        "Unsupported.Scheme"
      ]
    },
    "FinalPaymentAmount": {
      "id": "FinalPaymentAmount",
      "title": "FinalPaymentAmount",
      "description": "The amount of the final Standing Order",
      "type": "object",
      "properties": {
        "Amount": {
          "type": "string",
          "pattern": "^\\d{1,13}\\.\\d{1,5}$"
        },
        "Currency": {
          "description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 'Codes for the representation of currencies and funds'",
          "type": "string",
          "pattern": "^[A-Z]{3,3}$"
        }
      },
      "required": [
        "Amount",
        "Currency"
      ]
    },
    "GetAccountScheduledPaymentsResponse": {
      "id": "GetAccountScheduledPaymentsResponse",
      "title": "GetAccountScheduledPaymentsResponse",
      "type": "object",
      "properties": {
        "Data": {
          "$ref": "./schemaData.json#/modelSchemas/Data9"
        },
        "Links": {
          "$ref": "./schemaData.json#/modelSchemas/Links1"
        },
        "Meta": {
          "$ref": "./schemaData.json#/modelSchemas/Meta"
        }
      },
      "required": [
        "Data",
        "Links",
        "Meta"
      ]
    },
    "GetScheduledPaymentsResponse": {
      "id": "GetScheduledPaymentsResponse",
      "title": "GetScheduledPaymentsResponse",
      "type": "object",
      "properties": {
        "Data": {
          "$ref": "./schemaData.json#/modelSchemas/Data9"
        },
        "Links": {
          "$ref": "./schemaData.json#/modelSchemas/Links1"
        },
        "Meta": {
          "$ref": "./schemaData.json#/modelSchemas/Meta"
        }
      },
      "required": [
        "Data",
        "Links",
        "Meta"
      ]
    },
    "GetStatementsResponse": {
      "id": "GetStatementsResponse",
      "title": "GetStatementsResponse",
      "type": "object",
      "properties": {
        "Data": {
          "$ref": "./schemaData.json#/modelSchemas/Data21"
        },
        "Links": {
          "$ref": "./schemaData.json#/modelSchemas/Links1"
        },
        "Meta": {
          "$ref": "./schemaData.json#/modelSchemas/Meta"
        }
      },
      "required": [
        "Data",
        "Links",
        "Meta"
      ]
    },
    "NextPaymentAmount": {
      "id": "NextPaymentAmount",
      "title": "NextPaymentAmount",
      "description": "The amount of the next Standing Order",
      "type": "object",
      "properties": {
        "Amount": {
          "type": "string",
          "pattern": "^\\d{1,13}\\.\\d{1,5}$"
        },
        "Currency": {
          "description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 'Codes for the representation of currencies and funds'",
          "type": "string",
          "pattern": "^[A-Z]{3,3}$"
        }
      },
      "required": [
        "Amount",
        "Currency"
      ]
    },
    "OfferType": {
      "title": "OfferType",
      "description": "Offer type, in a coded form.",
      "x-enum-elements": [
        {
          "name": "BalanceTransfer",
          "description": ""
        },
        {
          "name": "LimitIncrease",
          "description": ""
        },
        {
          "name": "MoneyTransfer",
          "description": ""
        },
        {
          "name": "Other",
          "description": ""
        },
        {
          "name": "PromotionalRate",
          "description": ""
        }
      ],
      "type": "string",
      "additionalProperties": false,
      "enum": [
        "BalanceTransfer",
        "LimitIncrease",
        "MoneyTransfer",
        "Other",
        "PromotionalRate"
      ]
    },
    "PostalAddress": {
      "id": "PostalAddress",
      "title": "PostalAddress",
      "description": "Information that locates and identifies a specific address, as defined by postal services.",
      "type": "object",
      "properties": {
        "AddressType": {
          "$ref": "./schemaData.json#/modelSchemas/AddressType1"
        },
        "AddressLine": {
          "description": "Information that locates and identifies a specific address, as defined by postal services, that is presented in free format text.",
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1,
            "maxLength": 70
          },
          "minItems": 0,
          "maxItems": 5
        },
        "StreetName": {
          "description": "Name of a street or thoroughfare.",
          "type": "string",
          "minLength": 1,
          "maxLength": 70
        },
        "BuildingNumber": {
          "description": "Number that identifies the position of a building on a street.",
          "type": "string",
          "minLength": 1,
          "maxLength": 16
        },
        "PostCode": {
          "description": "Identifier consisting of a group of letters and/or numbers that is added to a postal address to assist the sorting of mail.",
          "type": "string",
          "minLength": 1,
          "maxLength": 16
        },
        "TownName": {
          "description": "Name of a built-up area, with defined boundaries, and a local government.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "CountrySubDivision": {
          "description": "Identifies a subdivision of a country such as state, region, county.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "Country": {
          "description": "Nation with its own government.",
          "type": "string",
          "pattern": "^[A-Z]{2,2}$"
        }
      },
      "required": [
        "Country"
      ]
    },
    "StandingOrderStatusCode": {
      "title": "StandingOrderStatusCode",
      "description": "Specifies the status of the standing order in code form.",
      "x-enum-elements": [
        {
          "name": "Active",
          "description": ""
        },
        {
          "name": "Inactive",
          "description": ""
        }
      ],
      "type": "string",
      "additionalProperties": false,
      "enum": [
        "Active",
        "Inactive"
      ]
    },
    "StatementBenefit": {
      "id": "StatementBenefit",
      "title": "StatementBenefit",
      "description": "Set of elements used to provide details of a benefit or reward amount for the statement resource.",
      "type": "object",
      "properties": {
        "Amount": {
          "$ref": "./schemaData.json#/modelSchemas/Amount42"
        },
        "Type": {
          "$ref": "./schemaData.json#/modelSchemas/Type4"
        }
      },
      "required": [
        "Amount",
        "Type"
      ]
    },
    "StatementInterest": {
      "id": "StatementInterest",
      "title": "StatementInterest",
      "description": "Set of elements used to provide details of a generic interest amount related to the statement resource.",
      "type": "object",
      "properties": {
        "Amount": {
          "$ref": "./schemaData.json#/modelSchemas/Amount42"
        },
        "CreditDebitIndicator": {
          "$ref": "./schemaData.json#/modelSchemas/CreditDebitIndicator3"
        },
        "Type": {
          "$ref": "./schemaData.json#/modelSchemas/Type6"
        }
      },
      "required": [
        "Amount",
        "CreditDebitIndicator",
        "Type"
      ]
    },
    "StatementRate": {
      "id": "StatementRate",
      "title": "StatementRate",
      "description": "Set of elements used to provide details of a generic rate related to the statement resource.",
      "type": "object",
      "properties": {
        "Rate": {
          "description": "Rate associated with the statement rate type.",
          "type": "string",
          "minLength": 1,
          "maxLength": 10,
          "pattern": "^(-?\\d{1,3}){1}(\\.\\d{1,4}){0,1}$"
        },
        "Type": {
          "$ref": "./schemaData.json#/modelSchemas/Type8"
        }
      },
      "required": [
        "Rate",
        "Type"
      ]
    },
    "StatementValue": {
      "id": "StatementValue",
      "title": "StatementValue",
      "description": "Set of elements used to provide details of a generic number value related to the statement resource.",
      "type": "object",
      "properties": {
        "Value": {
          "description": "Value associated with the statement value type.",
          "type": "integer",
          "format": "int32"
        },
        "Type": {
          "$ref": "./schemaData.json#/modelSchemas/Type9"
        }
      },
      "required": [
        "Value",
        "Type"
      ]
    },
    "Type5": {
      "title": "Type5",
      "description": "Fee type, in a coded form.",
      "x-enum-elements": [
        {
          "name": "Annual",
          "description": ""
        },
        {
          "name": "BalanceTransfer",
          "description": ""
        },
        {
          "name": "CashAdvance",
          "description": ""
        },
        {
          "name": "CashTransaction",
          "description": ""
        },
        {
          "name": "ForeignTransaction",
          "description": ""
        },
        {
          "name": "Gambling",
          "description": ""
        },
        {
          "name": "LatePayment",
          "description": ""
        },
        {
          "name": "MoneyTransfer",
          "description": ""
        },
        {
          "name": "Monthly",
          "description": ""
        },
        {
          "name": "Overlimit",
          "description": ""
        },
        {
          "name": "PostalOrder",
          "description": ""
        },
        {
          "name": "PrizeEntry",
          "description": ""
        },
        {
          "name": "StatementCopy",
          "description": ""
        },
        {
          "name": "Total",
          "description": ""
        }
      ],
      "type": "string",
      "additionalProperties": false,
      "enum": [
        "Annual",
        "BalanceTransfer",
        "CashAdvance",
        "CashTransaction",
        "ForeignTransaction",
        "Gambling",
        "LatePayment",
        "MoneyTransfer",
        "Monthly",
        "Overlimit",
        "PostalOrder",
        "PrizeEntry",
        "StatementCopy",
        "Total"
      ]
    },
    "Data7": {
      "id": "Data7",
      "title": "Data7",
      "type": "object",
      "properties": {
        "Offer": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/OfferModel"
          }
        }
      }
    },
    "DebtorAccount": {
      "id": "DebtorAccount",
      "title": "DebtorAccount",
      "description": "Unambiguous identification of the account of the debtor, in the case of a crebit transaction.",
      "type": "object",
      "properties": {
        "SchemeName": {
          "$ref": "./schemaData.json#/modelSchemas/AccountSchemeModel"
        },
        "Identification": {
          "description": "Identification assigned by an institution to identify an account. This identification is known by the account owner.",
          "type": "string",
          "minLength": 1,
          "maxLength": 34
        },
        "Name": {
          "description": "Name of the account, as assigned by the account servicing institution, in agreement with the account owner in order to provide an additional means of identification of the account.\nUsage: The account name is different from the account owner name. The account name is used in certain user communities to provide a means of identifying the account, in addition to the account owner's identity and the account number.",
          "type": "string",
          "minLength": 1,
          "maxLength": 70
        },
        "SecondaryIdentification": {
          "description": "This is secondary identification of the account, as assigned by the account servicing institution.",
          "type": "string",
          "minLength": 1,
          "maxLength": 34
        }
      },
      "required": [
        "SchemeName",
        "Identification"
      ]
    },
    "DebtorAgent": {
      "id": "DebtorAgent",
      "title": "DebtorAgent",
      "description": "Financial institution servicing an account for the debtor.",
      "type": "object",
      "properties": {
        "SchemeName": {
          "description": "Name of the identification scheme, in a coded form as published in an external list.",
          "type": "string",
          "enum": [
            "BICFI"
          ]
        },
        "Identification": {
          "description": "Unique and unambiguous identification of a financial institution or a branch of a financial institution.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        }
      },
      "required": [
        "SchemeName",
        "Identification"
      ]
    },
    "Fee": {
      "id": "Fee",
      "title": "Fee",
      "description": "Fee associated with the offer type.",
      "type": "object",
      "properties": {
        "Amount": {
          "type": "string",
          "pattern": "^\\d{1,13}\\.\\d{1,5}$"
        },
        "Currency": {
          "description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\".",
          "type": "string",
          "pattern": "^[A-Z]{3,3}$"
        }
      },
      "required": [
        "Amount",
        "Currency"
      ]
    },
    "GeoLocation": {
      "id": "GeoLocation",
      "title": "GeoLocation",
      "description": "Location of the end-user on the earth specified by two numbers representing vertical and horizontal position",
      "type": "object",
      "properties": {
        "Latitude": {
          "description": "Latitude measured in decimal degress",
          "type": "string",
          "maxLength": 14,
          "pattern": "^-?\\d{1,3}\\.\\d{1,8}$"
        },
        "Longitude": {
          "description": "Longitude measured in decimal degress",
          "type": "string",
          "maxLength": 14,
          "pattern": "^-?\\d{1,3}\\.\\d{1,8}$"
        }
      }
    },
    "GetAccountOffersResponse": {
      "id": "GetAccountOffersResponse",
      "title": "GetAccountOffersResponse",
      "type": "object",
      "properties": {
        "Data": {
          "$ref": "./schemaData.json#/modelSchemas/Data7"
        },
        "Links": {
          "$ref": "./schemaData.json#/modelSchemas/Links1"
        },
        "Meta": {
          "$ref": "./schemaData.json#/modelSchemas/Meta"
        }
      },
      "required": [
        "Data",
        "Links",
        "Meta"
      ]
    },
    "GetAccountStatementResponse": {
      "id": "GetAccountStatementResponse",
      "title": "GetAccountStatementResponse",
      "type": "object",
      "properties": {
        "Data": {
          "$ref": "./schemaData.json#/modelSchemas/Data11"
        },
        "Links": {
          "$ref": "./schemaData.json#/modelSchemas/Links1"
        },
        "Meta": {
          "$ref": "./schemaData.json#/modelSchemas/Meta"
        }
      },
      "required": [
        "Data",
        "Links",
        "Meta"
      ]
    },
    "GetAccountStatementsResponse": {
      "id": "GetAccountStatementsResponse",
      "title": "GetAccountStatementsResponse",
      "type": "object",
      "properties": {
        "Data": {
          "$ref": "./schemaData.json#/modelSchemas/Data10"
        },
        "Links": {
          "$ref": "./schemaData.json#/modelSchemas/Links1"
        },
        "Meta": {
          "$ref": "./schemaData.json#/modelSchemas/Meta"
        }
      },
      "required": [
        "Data",
        "Links",
        "Meta"
      ]
    },
    "GetOffersResponse": {
      "id": "GetOffersResponse",
      "title": "GetOffersResponse",
      "type": "object",
      "properties": {
        "Data": {
          "$ref": "./schemaData.json#/modelSchemas/Data7"
        },
        "Links": {
          "$ref": "./schemaData.json#/modelSchemas/Links1"
        },
        "Meta": {
          "$ref": "./schemaData.json#/modelSchemas/Meta"
        }
      },
      "required": [
        "Data",
        "Links",
        "Meta"
      ]
    },
    "GetPartyResponse": {
      "id": "GetPartyResponse",
      "title": "GetPartyResponse",
      "type": "object",
      "properties": {
        "Data": {
          "$ref": "./schemaData.json#/modelSchemas/Data8"
        },
        "Links": {
          "$ref": "./schemaData.json#/modelSchemas/Links1"
        },
        "Meta": {
          "$ref": "./schemaData.json#/modelSchemas/Meta"
        }
      },
      "required": [
        "Data",
        "Links",
        "Meta"
      ]
    },
    "InstructedAmount": {
      "id": "InstructedAmount",
      "title": "InstructedAmount",
      "description": "Amount of money of the cash balance after a transaction entry is applied to the account..",
      "type": "object",
      "properties": {
        "Amount": {
          "description": "A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.",
          "type": "string",
          "pattern": "^\\d{1,13}\\.\\d{1,5}$"
        },
        "Currency": {
          "description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\".",
          "type": "string",
          "pattern": "^[A-Z]{3,3}$"
        }
      },
      "required": [
        "Amount",
        "Currency"
      ]
    },
    "ScheduledType": {
      "title": "ScheduledType",
      "description": "Specifies the scheduled payment date type requested",
      "x-enum-elements": [
        {
          "name": "Arrival",
          "description": ""
        },
        {
          "name": "Execution",
          "description": ""
        }
      ],
      "type": "string",
      "additionalProperties": false,
      "enum": [
        "Arrival",
        "Execution"
      ]
    },
    "StatementAmount": {
      "id": "StatementAmount",
      "title": "StatementAmount",
      "description": "Set of elements used to provide details of a generic amount for the statement resource.",
      "type": "object",
      "properties": {
        "Amount": {
          "$ref": "./schemaData.json#/modelSchemas/Amount42"
        },
        "CreditDebitIndicator": {
          "$ref": "./schemaData.json#/modelSchemas/CreditDebitIndicator3"
        },
        "Type": {
          "$ref": "./schemaData.json#/modelSchemas/Type10"
        }
      },
      "required": [
        "Amount",
        "CreditDebitIndicator",
        "Type"
      ]
    },
    "Status1": {
      "title": "Status1",
      "description": "Status of a transaction entry on the books of the account servicer.",
      "x-enum-elements": [
        {
          "name": "Booked",
          "description": ""
        },
        {
          "name": "Pending",
          "description": ""
        }
      ],
      "type": "string",
      "additionalProperties": false,
      "enum": [
        "Booked",
        "Pending"
      ]
    },
    "Type1": {
      "title": "Type1",
      "description": "Limit type, in a coded form.",
      "x-enum-elements": [
        {
          "name": "PreAgreed",
          "description": ""
        },
        {
          "name": "Emergency",
          "description": ""
        },
        {
          "name": "Temporary",
          "description": ""
        }
      ],
      "type": "string",
      "additionalProperties": false,
      "enum": [
        "Pre-Agreed",
        "Emergency",
        "Temporary"
      ]
    },
    "Type6": {
      "title": "Type6",
      "description": "Interest amount type, in a coded form.",
      "x-enum-elements": [
        {
          "name": "BalanceTransfer",
          "description": ""
        },
        {
          "name": "Cash",
          "description": ""
        },
        {
          "name": "EstimatedNext",
          "description": ""
        },
        {
          "name": "Purchase",
          "description": ""
        },
        {
          "name": "Total",
          "description": ""
        }
      ],
      "type": "string",
      "additionalProperties": false,
      "enum": [
        "BalanceTransfer",
        "Cash",
        "EstimatedNext",
        "Purchase",
        "Total"
      ]
    },
    "Data11": {
      "id": "Data11",
      "title": "Data11",
      "type": "object",
      "properties": {
        "Statement": {
          "$ref": "./schemaData.json#/modelSchemas/Statement"
        }
      }
    },
    "Data8": {
      "id": "Data8",
      "title": "Data8",
      "type": "object",
      "properties": {
        "Party": {
          "$ref": "./schemaData.json#/modelSchemas/PartyModel"
        }
      }
    },
    "Data9": {
      "id": "Data9",
      "title": "Data9",
      "type": "object",
      "properties": {
        "ScheduledPayment": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/ScheduledPaymentModel"
          }
        }
      }
    },
    "DirectDebitStatusCode": {
      "title": "DirectDebitStatusCode",
      "description": "Specifies the status of the direct debit in code form.",
      "x-enum-elements": [
        {
          "name": "Active",
          "description": ""
        },
        {
          "name": "Inactive",
          "description": ""
        }
      ],
      "type": "string",
      "additionalProperties": false,
      "enum": [
        "Active",
        "Inactive"
      ]
    },
    "FirstPaymentAmount": {
      "id": "FirstPaymentAmount",
      "title": "FirstPaymentAmount",
      "description": "The amount of the first Standing Order",
      "type": "object",
      "properties": {
        "Amount": {
          "type": "string",
          "pattern": "^\\d{1,13}\\.\\d{1,5}$"
        },
        "Currency": {
          "description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 'Codes for the representation of currencies and funds'",
          "type": "string",
          "pattern": "^[A-Z]{3,3}$"
        }
      },
      "required": [
        "Amount",
        "Currency"
      ]
    },
    "GetAccountPartyResponse": {
      "id": "GetAccountPartyResponse",
      "title": "GetAccountPartyResponse",
      "type": "object",
      "properties": {
        "Data": {
          "$ref": "./schemaData.json#/modelSchemas/Data8"
        },
        "Links": {
          "$ref": "./schemaData.json#/modelSchemas/Links1"
        },
        "Meta": {
          "$ref": "./schemaData.json#/modelSchemas/Meta"
        }
      },
      "required": [
        "Data",
        "Links",
        "Meta"
      ]
    },
    "GetAccountStatementTransactionsResponse": {
      "id": "GetAccountStatementTransactionsResponse",
      "title": "GetAccountStatementTransactionsResponse",
      "type": "object",
      "properties": {
        "Data": {
          "$ref": "./schemaData.json#/modelSchemas/Data12"
        },
        "Links": {
          "$ref": "./schemaData.json#/modelSchemas/Links1"
        },
        "Meta": {
          "$ref": "./schemaData.json#/modelSchemas/Meta"
        }
      },
      "required": [
        "Data",
        "Links",
        "Meta"
      ]
    },
    "InstructedAmount1": {
      "id": "InstructedAmount1",
      "title": "InstructedAmount1",
      "description": "Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.\nUsage: This amount has to be transported unchanged through the transaction chain.",
      "type": "object",
      "properties": {
        "Amount": {
          "type": "string",
          "pattern": "^\\d{1,13}\\.\\d{1,5}$"
        },
        "Currency": {
          "description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\".",
          "type": "string",
          "pattern": "^[A-Z]{3,3}$"
        }
      },
      "required": [
        "Amount",
        "Currency"
      ]
    },
    "PaymentContextCode": {
      "title": "PaymentContextCode",
      "description": "Specifies the payment context",
      "x-enum-elements": [
        {
          "name": "BillPayment",
          "description": ""
        },
        {
          "name": "EcommerceGoods",
          "description": ""
        },
        {
          "name": "EcommerceServices",
          "description": ""
        },
        {
          "name": "Other",
          "description": ""
        },
        {
          "name": "PersonToPerson",
          "description": ""
        }
      ],
      "type": "string",
      "additionalProperties": false,
      "enum": [
        "BillPayment",
        "EcommerceGoods",
        "EcommerceServices",
        "Other",
        "PersonToPerson"
      ]
    },
    "ProprietaryBankTransactionCode": {
      "id": "ProprietaryBankTransactionCode",
      "title": "ProprietaryBankTransactionCode",
      "description": "Set of elements to fully identify a proprietary bank transaction code.",
      "type": "object",
      "properties": {
        "Code": {
          "description": "Proprietary bank transaction code to identify the underlying transaction.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "Issuer": {
          "description": "Identification of the issuer of the proprietary bank transaction code.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        }
      },
      "required": [
        "Code"
      ]
    },
    "StatementDateTime": {
      "id": "StatementDateTime",
      "title": "StatementDateTime",
      "description": "Set of elements used to provide details of a generic date time for the statement resource.",
      "type": "object",
      "properties": {
        "DateTime": {
          "description": "Date and time associated with the date time type.\nAll dates in the JSON payloads are represented in ISO 8601 date-time format.\nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
          "type": "string",
          "format": "date-time"
        },
        "Type": {
          "$ref": "./schemaData.json#/modelSchemas/Type7"
        }
      },
      "required": [
        "DateTime",
        "Type"
      ]
    },
    "StatementFee": {
      "id": "StatementFee",
      "title": "StatementFee",
      "description": "Set of elements used to provide details of a fee for the statement resource.",
      "type": "object",
      "properties": {
        "Amount": {
          "$ref": "./schemaData.json#/modelSchemas/Amount42"
        },
        "CreditDebitIndicator": {
          "$ref": "./schemaData.json#/modelSchemas/CreditDebitIndicator3"
        },
        "Type": {
          "$ref": "./schemaData.json#/modelSchemas/Type5"
        }
      },
      "required": [
        "Amount",
        "CreditDebitIndicator",
        "Type"
      ]
    },
    "TransactionsGETresponse": {
      "id": "TransactionsGETresponse",
      "title": "TransactionsGETresponse",
      "type": "object",
      "properties": {
        "Data": {
          "$ref": "./schemaData.json#/modelSchemas/Data26"
        },
        "Links": {
          "$ref": "./schemaData.json#/modelSchemas/Links1"
        },
        "Meta": {
          "$ref": "./schemaData.json#/modelSchemas/Meta"
        }
      },
      "required": [
        "Data",
        "Links",
        "Meta"
      ]
    },
    "Type": {
      "title": "Type",
      "description": "Balance type, in a coded form.",
      "x-enum-elements": [
        {
          "name": "ClosingAvailable",
          "description": ""
        },
        {
          "name": "ClosingBooked",
          "description": ""
        },
        {
          "name": "Expected",
          "description": ""
        },
        {
          "name": "ForwardAvailable",
          "description": ""
        },
        {
          "name": "Information",
          "description": ""
        },
        {
          "name": "InterimAvailable",
          "description": ""
        },
        {
          "name": "InterimBooked",
          "description": ""
        },
        {
          "name": "OpeningAvailable",
          "description": ""
        },
        {
          "name": "OpeningBooked",
          "description": ""
        },
        {
          "name": "PreviouslyClosedBooked",
          "description": ""
        }
      ],
      "type": "string",
      "additionalProperties": false,
      "enum": [
        "ClosingAvailable",
        "ClosingBooked",
        "Expected",
        "ForwardAvailable",
        "Information",
        "InterimAvailable",
        "InterimBooked",
        "OpeningAvailable",
        "OpeningBooked",
        "PreviouslyClosedBooked"
      ]
    },
    "Type4": {
      "title": "Type4",
      "description": "Benefit type, in a coded form.",
      "x-enum-elements": [
        {
          "name": "Cashback",
          "description": ""
        },
        {
          "name": "Insurance",
          "description": ""
        },
        {
          "name": "TravelDiscount",
          "description": ""
        },
        {
          "name": "TravelInsurance",
          "description": ""
        }
      ],
      "type": "string",
      "additionalProperties": false,
      "enum": [
        "Cashback",
        "Insurance",
        "TravelDiscount",
        "TravelInsurance"
      ]
    },
    "Data12": {
      "id": "Data12",
      "title": "Data12",
      "type": "object",
      "properties": {
        "Transaction": {
          "description": "Provides further details on an entry in the report.",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/TransactionModel"
          }
        }
      }
    },
    "DeliveryAddress": {
      "id": "DeliveryAddress",
      "title": "DeliveryAddress",
      "description": "Information that locates and identifies a specific address, as defined by postal services or in free format text.",
      "type": "object",
      "properties": {
        "AddressType": {
          "$ref": "./schemaData.json#/modelSchemas/AddressType"
        },
        "AddressLine": {
          "description": "Information that locates and identifies a specific address, as defined by postal services, that is presented in free format text.",
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1,
            "maxLength": 70
          },
          "minItems": 0,
          "maxItems": 5
        },
        "StreetName": {
          "description": "Name of a street or thoroughfare.",
          "type": "string",
          "minLength": 1,
          "maxLength": 70
        },
        "BuildingNumber": {
          "description": "Number that identifies the position of a building on a street.",
          "type": "string",
          "minLength": 1,
          "maxLength": 16
        },
        "PostCode": {
          "description": "Identifier consisting of a group of letters and/or numbers that is added to a postal address to assist the sorting of mail",
          "type": "string",
          "minLength": 1,
          "maxLength": 16
        },
        "TownName": {
          "description": "Name of a built-up area, with defined boundaries, and a local government.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "CountrySubDivision": {
          "description": "Identifies a subdivision of a country, for instance state, region, county.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "Country": {
          "description": "Nation with its own government, occupying a particular territory.",
          "type": "string",
          "pattern": "^[A-Z]{2,2}$"
        }
      },
      "required": [
        "Country"
      ]
    },
    "MerchantDetails": {
      "id": "MerchantDetails",
      "title": "MerchantDetails",
      "description": "Details of the merchant involved in the transaction.",
      "type": "object",
      "properties": {
        "MerchantName": {
          "description": "Name by which the merchant is known.",
          "type": "string",
          "minLength": 1,
          "maxLength": 350
        },
        "MerchantCategoryCode": {
          "description": "Category code conform to ISO 18245, related to the type of services or goods the merchant provides for the transaction.",
          "type": "string",
          "minLength": 3,
          "maxLength": 4
        }
      }
    },
    "PartyType": {
      "title": "PartyType",
      "description": "Party type, in a coded form.",
      "x-enum-elements": [
        {
          "name": "Delegate",
          "description": ""
        },
        {
          "name": "Joint",
          "description": ""
        },
        {
          "name": "Sole",
          "description": ""
        }
      ],
      "type": "string",
      "additionalProperties": false,
      "enum": [
        "Delegate",
        "Joint",
        "Sole"
      ]
    },
    "Permission": {
      "title": "Permission",
      "description": "Specifies the Open Banking account access consent types. This is a list of the data clusters being consented by the Customer, and requested for authorisation with the API Provider.",
      "x-enum-elements": [
        {
          "name": "ReadAccountsBasic",
          "description": ""
        },
        {
          "name": "ReadAccountsDetail",
          "description": ""
        },
        {
          "name": "ReadBalances",
          "description": ""
        },
        {
          "name": "ReadBeneficiariesBasic",
          "description": ""
        },
        {
          "name": "ReadBeneficiariesDetail",
          "description": ""
        },
        {
          "name": "ReadDirectDebits",
          "description": ""
        },
        {
          "name": "ReadOffers",
          "description": ""
        },
        {
          "name": "ReadParty",
          "description": ""
        },
        {
          "name": "ReadPartyAuthUser",
          "description": ""
        },
        {
          "name": "ReadScheduledPaymentsBasic",
          "description": ""
        },
        {
          "name": "ReadScheduledPaymentsDetail",
          "description": ""
        },
        {
          "name": "ReadStandingOrdersBasic",
          "description": ""
        },
        {
          "name": "ReadStandingOrdersDetail",
          "description": ""
        },
        {
          "name": "ReadStatementsBasic",
          "description": ""
        },
        {
          "name": "ReadStatementsDetail",
          "description": ""
        },
        {
          "name": "ReadTransactionsBasic",
          "description": ""
        },
        {
          "name": "ReadTransactionsCredits",
          "description": ""
        },
        {
          "name": "ReadTransactionsDebits",
          "description": ""
        },
        {
          "name": "ReadTransactionsDetail",
          "description": ""
        }
      ],
      "type": "string",
      "additionalProperties": false,
      "enum": [
        "ReadAccountsBasic",
        "ReadAccountsDetail",
        "ReadBalances",
        "ReadBeneficiariesBasic",
        "ReadBeneficiariesDetail",
        "ReadDirectDebits",
        "ReadOffers",
        "ReadParty",
        "ReadPartyAuthUser",
        "ReadScheduledPaymentsBasic",
        "ReadScheduledPaymentsDetail",
        "ReadStandingOrdersBasic",
        "ReadStandingOrdersDetail",
        "ReadStatementsBasic",
        "ReadStatementsDetail",
        "ReadTransactionsBasic",
        "ReadTransactionsCredits",
        "ReadTransactionsDebits",
        "ReadTransactionsDetail"
      ]
    },
    "PreviousPaymentAmount": {
      "id": "PreviousPaymentAmount",
      "title": "PreviousPaymentAmount",
      "description": "The amount of the most recent direct debit collection.",
      "type": "object",
      "properties": {
        "Amount": {
          "type": "string",
          "pattern": "^\\d{1,13}\\.\\d{1,5}$"
        },
        "Currency": {
          "description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 'Codes for the representation of currencies and funds'",
          "type": "string",
          "pattern": "^[A-Z]{3,3}$"
        }
      },
      "required": [
        "Amount",
        "Currency"
      ]
    },
    "SchemeName": {
      "title": "SchemeName",
      "description": "Name of the identification scheme, in a coded form as published in an external list.",
      "x-enum-elements": [
        {
          "name": "BICFI",
          "description": ""
        }
      ],
      "type": "string",
      "additionalProperties": false,
      "enum": [
        "BICFI"
      ]
    },
    "Servicer": {
      "id": "Servicer",
      "title": "Servicer",
      "description": "Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.",
      "type": "object",
      "properties": {
        "SchemeName": {
          "description": "Name of the identification scheme, in a coded form as published in an external list.",
          "type": "string",
          "enum": [
            "BICFI"
          ]
        },
        "Identification": {
          "description": "Unique and unambiguous identification of the servicing institution.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        }
      },
      "required": [
        "SchemeName",
        "Identification"
      ]
    },
    "StandingOrdersGETresponse": {
      "id": "StandingOrdersGETresponse",
      "title": "StandingOrdersGETresponse",
      "type": "object",
      "properties": {
        "Data": {
          "$ref": "./schemaData.json#/modelSchemas/Data25"
        },
        "Links": {
          "$ref": "./schemaData.json#/modelSchemas/Links1"
        },
        "Meta": {
          "$ref": "./schemaData.json#/modelSchemas/Meta"
        }
      },
      "required": [
        "Data",
        "Links",
        "Meta"
      ]
    },
    "Status": {
      "title": "Status",
      "description": "Specifies the status of the account access consent.",
      "x-enum-elements": [
        {
          "name": "Authorised",
          "description": ""
        },
        {
          "name": "AwaitingAuthorisation",
          "description": ""
        },
        {
          "name": "Rejected",
          "description": ""
        },
        {
          "name": "Revoked",
          "description": ""
        }
      ],
      "type": "string",
      "additionalProperties": false,
      "enum": [
        "Authorised",
        "AwaitingAuthorisation",
        "Rejected",
        "Revoked"
      ]
    },
    "Type3": {
      "title": "Type3",
      "description": "Statement type, in a coded form.",
      "x-enum-elements": [
        {
          "name": "AccountClosure",
          "description": ""
        },
        {
          "name": "AccountOpening",
          "description": ""
        },
        {
          "name": "Annual",
          "description": ""
        },
        {
          "name": "Interim",
          "description": ""
        },
        {
          "name": "RegularPeriodic",
          "description": ""
        }
      ],
      "type": "string",
      "additionalProperties": false,
      "enum": [
        "AccountClosure",
        "AccountOpening",
        "Annual",
        "Interim",
        "RegularPeriodic"
      ]
    },
    "Type7": {
      "title": "Type7",
      "description": "Date time type, in a coded form.",
      "x-enum-elements": [
        {
          "name": "BalanceTransferPromoEnd",
          "description": ""
        },
        {
          "name": "DirectDebitDue",
          "description": ""
        },
        {
          "name": "LastPayment",
          "description": ""
        },
        {
          "name": "LastStatement",
          "description": ""
        },
        {
          "name": "NextStatement",
          "description": ""
        },
        {
          "name": "PaymentDue",
          "description": ""
        },
        {
          "name": "PurchasePromoEnd",
          "description": ""
        },
        {
          "name": "StatementAvailable",
          "description": ""
        }
      ],
      "type": "string",
      "additionalProperties": false,
      "enum": [
        "BalanceTransferPromoEnd",
        "DirectDebitDue",
        "LastPayment",
        "LastStatement",
        "NextStatement",
        "PaymentDue",
        "PurchasePromoEnd",
        "StatementAvailable"
      ]
    },
    "Type8": {
      "title": "Type8",
      "description": "Statement rate type, in a coded form.",
      "x-enum-elements": [
        {
          "name": "AnnualBalanceTransfer",
          "description": ""
        },
        {
          "name": "AnnualBalanceTransferAfterPromo",
          "description": ""
        },
        {
          "name": "AnnualBalanceTransferPromo",
          "description": ""
        },
        {
          "name": "AnnualCash",
          "description": ""
        },
        {
          "name": "AnnualPurchase",
          "description": ""
        },
        {
          "name": "AnnualPurchaseAfterPromo",
          "description": ""
        },
        {
          "name": "AnnualPurchasePromo",
          "description": ""
        },
        {
          "name": "MonthlyBalanceTransfer",
          "description": ""
        },
        {
          "name": "MonthlyCash",
          "description": ""
        },
        {
          "name": "MonthlyPurchase",
          "description": ""
        }
      ],
      "type": "string",
      "additionalProperties": false,
      "enum": [
        "AnnualBalanceTransfer",
        "AnnualBalanceTransferAfterPromo",
        "AnnualBalanceTransferPromo",
        "AnnualCash",
        "AnnualPurchase",
        "AnnualPurchaseAfterPromo",
        "AnnualPurchasePromo",
        "MonthlyBalanceTransfer",
        "MonthlyCash",
        "MonthlyPurchase"
      ]
    },
    "Amount42": {
      "id": "Amount42",
      "title": "Amount42",
      "type": "object",
      "properties": {
        "Amount": {
          "type": "string",
          "pattern": "^\\d{1,13}\\.\\d{1,5}$"
        },
        "Currency": {
          "description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\".",
          "type": "string",
          "pattern": "^[A-Z]{3,3}$"
        }
      },
      "required": [
        "Amount",
        "Currency"
      ]
    },
    "Type9": {
      "title": "Type9",
      "description": "Statement value type, in a coded form.",
      "x-enum-elements": [
        {
          "name": "AirMilesPoints",
          "description": ""
        },
        {
          "name": "AirMilesPointsBalance",
          "description": ""
        },
        {
          "name": "Credits",
          "description": ""
        },
        {
          "name": "Debits",
          "description": ""
        },
        {
          "name": "HotelPoints",
          "description": ""
        },
        {
          "name": "HotelPointsBalance",
          "description": ""
        },
        {
          "name": "RetailShoppingPoints",
          "description": ""
        },
        {
          "name": "RetailShoppingPointsBalance",
          "description": ""
        }
      ],
      "type": "string",
      "additionalProperties": false,
      "enum": [
        "AirMilesPoints",
        "AirMilesPointsBalance",
        "Credits",
        "Debits",
        "HotelPoints",
        "HotelPointsBalance",
        "RetailShoppingPoints",
        "RetailShoppingPointsBalance"
      ]
    },
    "Account3": {
      "id": "Account3",
      "title": "Account3",
      "type": "object",
      "properties": {
        "SchemeName": {
          "$ref": "./schemaData.json#/modelSchemas/AccountSchemeModel"
        },
        "Identification": {
          "description": "Identification assigned by an institution to identify an account. This identification is known by the account owner.",
          "type": "string",
          "minLength": 1,
          "maxLength": 34
        },
        "Name": {
          "description": "Name of the account, as assigned by the account servicing institution, in agreement with the account owner in order to provide an additional means of identification of the account. Usage: The account name is different from the account owner name. The account name is used in certain user communities to provide a means of identifying the account, in addition to the account owner's identity and the account number.",
          "type": "string",
          "minLength": 1,
          "maxLength": 70
        },
        "SecondaryIdentification": {
          "description": "This is secondary identification of the account, as assigned by the account servicing institution.",
          "type": "string",
          "minLength": 1,
          "maxLength": 34
        }
      },
      "required": [
        "SchemeName",
        "Identification"
      ]
    },
    "Consent1": {
      "id": "Consent1",
      "title": "Consent1",
      "type": "object",
      "properties": {
        "Permissions": {
          "description": "Specifies the Open Banking account access consent types. This is a list of the data clusters being consented by the Customer, and requested for authorisation with the API Provider.",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Permission"
          }
        },
        "ExpirationDateTime": {
          "description": "Specified date and time the permissions will expire. If this is not populated, the permissions will be open ended.\nAll dates in the JSON payloads are represented in ISO 8601 date-time format.\nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
          "type": "string",
          "format": "date-time"
        },
        "TransactionFromDateTime": {
          "description": "Specified start date and time for the transaction query period. If this is not populated, the start date will be open ended, and data will be returned from the earliest available transaction.\nAll dates in the JSON payloads are represented in ISO 8601 date-time format.\nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
          "type": "string",
          "format": "date-time"
        },
        "TransactionToDateTime": {
          "description": "Specified end date and time for the transaction query period. If this is not populated, the end date will be open ended, and data will be returned to the latest available transaction.\nAll dates in the JSON payloads are represented in ISO 8601 date-time format.\nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "Permissions"
      ]
    },
    "CreditorAccount2": {
      "id": "CreditorAccount2",
      "title": "CreditorAccount2",
      "type": "object",
      "properties": {
        "SchemeName": {
          "$ref": "./schemaData.json#/modelSchemas/AccountSchemeModel"
        },
        "Identification": {
          "description": "Identification assigned by an institution to identify an account. This identification is known by the account owner.",
          "type": "string",
          "minLength": 1,
          "maxLength": 34
        },
        "Name": {
          "description": "Name of the account, as assigned by the account servicing institution, in agreement with the account owner in order to provide an additional means of identification of the account. Usage: The account name is different from the account owner name. The account name is used in certain user communities to provide a means of identifying the account, in addition to the account owner's identity and the account number.",
          "type": "string",
          "minLength": 1,
          "maxLength": 70
        },
        "SecondaryIdentification": {
          "description": "This is secondary identification of the account, as assigned by the account servicing institution.",
          "type": "string",
          "minLength": 1,
          "maxLength": 34
        }
      },
      "required": [
        "SchemeName",
        "Identification"
      ]
    },
    "Data13": {
      "id": "Data13",
      "title": "Data13",
      "type": "object",
      "properties": {
        "DirectDebit": {
          "description": "DirectDebit",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/DirectDebitModel"
          }
        }
      }
    },
    "Data26": {
      "id": "Data26",
      "title": "Data26",
      "type": "object",
      "properties": {
        "Transaction": {
          "description": "Transaction",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/TransactionModel"
          }
        }
      }
    },
    "FirstPaymentAmount2": {
      "id": "FirstPaymentAmount2",
      "title": "FirstPaymentAmount2",
      "type": "object",
      "properties": {
        "Amount": {
          "type": "string",
          "pattern": "^\\d{1,13}\\.\\d{1,5}$"
        },
        "Currency": {
          "description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 'Codes for the representation of currencies and funds'",
          "type": "string",
          "pattern": "^[A-Z]{3,3}$"
        }
      },
      "required": [
        "Amount",
        "Currency"
      ]
    },
    "GeoLocation2": {
      "id": "GeoLocation2",
      "title": "GeoLocation2",
      "type": "object",
      "properties": {
        "Latitude": {
          "description": "Latitude measured in decimal degress",
          "type": "string",
          "maxLength": 14,
          "pattern": "^-?\\d{1,3}\\.\\d{1,8}$"
        },
        "Longitude": {
          "description": "Longitude measured in decimal degress",
          "type": "string",
          "maxLength": 14,
          "pattern": "^-?\\d{1,3}\\.\\d{1,8}$"
        }
      }
    },
    "MerchantDetails2": {
      "id": "MerchantDetails2",
      "title": "MerchantDetails2",
      "type": "object",
      "properties": {
        "MerchantName": {
          "description": "Name by which the merchant is known.",
          "type": "string",
          "minLength": 1,
          "maxLength": 350
        },
        "MerchantCategoryCode": {
          "description": "Category code conform to ISO 18245, related to the type of services or goods the merchant provides for the transaction.",
          "type": "string",
          "minLength": 3,
          "maxLength": 4
        }
      }
    },
    "Meta": {
      "id": "Meta",
      "title": "Meta",
      "type": "object",
      "properties": {
        "TotalPages": {
          "type": "integer",
          "format": "int32"
        },
        "FirstAvailableDateTime": {
          "description": "All dates in the JSON payloads are represented in ISO 8601 date-time format.\nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
          "type": "string",
          "format": "date-time"
        },
        "LastAvailableDateTime": {
          "description": "All dates in the JSON payloads are represented in ISO 8601 date-time format.\nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "PostalAddress2": {
      "id": "PostalAddress2",
      "title": "PostalAddress2",
      "type": "object",
      "properties": {
        "AddressType": {
          "$ref": "./schemaData.json#/modelSchemas/AddressType1"
        },
        "AddressLine": {
          "description": "Information that locates and identifies a specific address, as defined by postal services, that is presented in free format text.",
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1,
            "maxLength": 70
          },
          "minItems": 0,
          "maxItems": 5
        },
        "StreetName": {
          "description": "Name of a street or thoroughfare.",
          "type": "string",
          "minLength": 1,
          "maxLength": 70
        },
        "BuildingNumber": {
          "description": "Number that identifies the position of a building on a street.",
          "type": "string",
          "minLength": 1,
          "maxLength": 16
        },
        "PostCode": {
          "description": "Identifier consisting of a group of letters and/or numbers that is added to a postal address to assist the sorting of mail.",
          "type": "string",
          "minLength": 1,
          "maxLength": 16
        },
        "TownName": {
          "description": "Name of a built-up area, with defined boundaries, and a local government.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "CountrySubDivision": {
          "description": "Identifies a subdivision of a country such as state, region, county.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "Country": {
          "description": "Nation with its own government.",
          "type": "string",
          "pattern": "^[A-Z]{2,2}$"
        }
      },
      "required": [
        "Country"
      ]
    },
    "CreditorAgent3": {
      "id": "CreditorAgent3",
      "title": "CreditorAgent3",
      "type": "object",
      "properties": {
        "SchemeName": {
          "description": "Name of the identification scheme, in a coded form as published in an external list.",
          "type": "string",
          "enum": [
            "BICFI"
          ]
        },
        "Identification": {
          "description": "Unique and unambiguous identification of a financial institution or a branch of a financial institution.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        }
      },
      "required": [
        "SchemeName",
        "Identification"
      ]
    },
    "CreditorAgent12": {
      "id": "CreditorAgent12",
      "title": "CreditorAgent12",
      "type": "object",
      "properties": {
        "SchemeName": {
          "$ref": "./schemaData.json#/modelSchemas/SchemeName"
        },
        "Identification": {
          "description": "Unique and unambiguous identification of the servicing institution.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "Name": {
          "description": "Name by which an agent is known and which is usually used to identify that agent.",
          "type": "string",
          "minLength": 1,
          "maxLength": 140
        },
        "PostalAddress": {
          "$ref": "./schemaData.json#/modelSchemas/PostalAddress2"
        }
      }
    },
    "CreditorAgent22": {
      "id": "CreditorAgent22",
      "title": "CreditorAgent22",
      "type": "object",
      "properties": {
        "SchemeName": {
          "description": "Name of the identification scheme, in a coded form as published in an external list.",
          "type": "string",
          "enum": [
            "BICFI"
          ]
        },
        "Identification": {
          "description": "Unique and unambiguous identification of the servicing institution.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        }
      },
      "required": [
        "SchemeName",
        "Identification"
      ]
    },
    "Data62": {
      "id": "Data62",
      "title": "Data62",
      "type": "object",
      "properties": {
        "Beneficiary": {
          "description": "Beneficiary",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/BeneficiaryModel"
          }
        }
      }
    },
    "DebtorAccount2": {
      "id": "DebtorAccount2",
      "title": "DebtorAccount2",
      "type": "object",
      "properties": {
        "SchemeName": {
          "$ref": "./schemaData.json#/modelSchemas/AccountSchemeModel"
        },
        "Identification": {
          "description": "Identification assigned by an institution to identify an account. This identification is known by the account owner.",
          "type": "string",
          "minLength": 1,
          "maxLength": 34
        },
        "Name": {
          "description": "Name of the account, as assigned by the account servicing institution, in agreement with the account owner in order to provide an additional means of identification of the account.\nUsage: The account name is different from the account owner name. The account name is used in certain user communities to provide a means of identifying the account, in addition to the account owner's identity and the account number.",
          "type": "string",
          "minLength": 1,
          "maxLength": 70
        },
        "SecondaryIdentification": {
          "description": "This is secondary identification of the account, as assigned by the account servicing institution.",
          "type": "string",
          "minLength": 1,
          "maxLength": 34
        }
      },
      "required": [
        "SchemeName",
        "Identification"
      ]
    },
    "FinalPaymentAmount2": {
      "id": "FinalPaymentAmount2",
      "title": "FinalPaymentAmount2",
      "type": "object",
      "properties": {
        "Amount": {
          "type": "string",
          "pattern": "^\\d{1,13}\\.\\d{1,5}$"
        },
        "Currency": {
          "description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 'Codes for the representation of currencies and funds'",
          "type": "string",
          "pattern": "^[A-Z]{3,3}$"
        }
      },
      "required": [
        "Amount",
        "Currency"
      ]
    },
    "InstructedAmount3": {
      "id": "InstructedAmount3",
      "title": "InstructedAmount3",
      "type": "object",
      "properties": {
        "Amount": {
          "description": "A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.",
          "type": "string",
          "pattern": "^\\d{1,13}\\.\\d{1,5}$"
        },
        "Currency": {
          "description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\".",
          "type": "string",
          "pattern": "^[A-Z]{3,3}$"
        }
      },
      "required": [
        "Amount",
        "Currency"
      ]
    },
    "Servicer2": {
      "id": "Servicer2",
      "title": "Servicer2",
      "type": "object",
      "properties": {
        "SchemeName": {
          "description": "Name of the identification scheme, in a coded form as published in an external list.",
          "type": "string",
          "enum": [
            "BICFI"
          ]
        },
        "Identification": {
          "description": "Unique and unambiguous identification of the servicing institution.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        }
      },
      "required": [
        "SchemeName",
        "Identification"
      ]
    },
    "Type10": {
      "title": "Type10",
      "description": "Amount type, in a coded form.",
      "x-enum-elements": [
        {
          "name": "ArrearsClosingBalance",
          "description": ""
        },
        {
          "name": "AvailableBalance",
          "description": ""
        },
        {
          "name": "AverageBalanceWhenInCredit",
          "description": ""
        },
        {
          "name": "AverageBalanceWhenInDebit",
          "description": ""
        },
        {
          "name": "AverageDailyBalance",
          "description": ""
        },
        {
          "name": "BalanceTransferClosingBalance",
          "description": ""
        },
        {
          "name": "CashClosingBalance",
          "description": ""
        },
        {
          "name": "ClosingBalance",
          "description": ""
        },
        {
          "name": "CreditLimit",
          "description": ""
        },
        {
          "name": "CurrentPayment",
          "description": ""
        },
        {
          "name": "DirectDebitPaymentDue",
          "description": ""
        },
        {
          "name": "MinimumPaymentDue",
          "description": ""
        },
        {
          "name": "PreviousClosingBalance",
          "description": ""
        },
        {
          "name": "PreviousPayment",
          "description": ""
        },
        {
          "name": "PurchaseClosingBalance",
          "description": ""
        },
        {
          "name": "StartingBalance",
          "description": ""
        },
        {
          "name": "TotalAdjustments",
          "description": ""
        },
        {
          "name": "TotalCashAdvances",
          "description": ""
        },
        {
          "name": "TotalCharges",
          "description": ""
        },
        {
          "name": "TotalCredits",
          "description": ""
        },
        {
          "name": "TotalDebits",
          "description": ""
        },
        {
          "name": "TotalPurchases",
          "description": ""
        }
      ],
      "type": "string",
      "additionalProperties": false,
      "enum": [
        "ArrearsClosingBalance",
        "AvailableBalance",
        "AverageBalanceWhenInCredit",
        "AverageBalanceWhenInDebit",
        "AverageDailyBalance",
        "BalanceTransferClosingBalance",
        "CashClosingBalance",
        "ClosingBalance",
        "CreditLimit",
        "CurrentPayment",
        "DirectDebitPaymentDue",
        "MinimumPaymentDue",
        "PreviousClosingBalance",
        "PreviousPayment",
        "PurchaseClosingBalance",
        "StartingBalance",
        "TotalAdjustments",
        "TotalCashAdvances",
        "TotalCharges",
        "TotalCredits",
        "TotalDebits",
        "TotalPurchases"
      ]
    },
    "CardInstrument2": {
      "id": "CardInstrument2",
      "title": "CardInstrument2",
      "type": "object",
      "properties": {
        "CardSchemeName": {
          "$ref": "./schemaData.json#/modelSchemas/CardSchemeName"
        },
        "AuthorisationType": {
          "$ref": "./schemaData.json#/modelSchemas/AuthorisationType"
        },
        "Name": {
          "description": "Name of the cardholder using the card instrument.",
          "type": "string",
          "minLength": 1,
          "maxLength": 70
        },
        "Identification": {
          "description": "Identification assigned by an institution to identify the card instrument used in the transaction. This identification is known by the account owner, and may be masked.",
          "type": "string",
          "minLength": 1,
          "maxLength": 34
        }
      },
      "required": [
        "CardSchemeName"
      ]
    },
    "CurrencyExchange2": {
      "id": "CurrencyExchange2",
      "title": "CurrencyExchange2",
      "type": "object",
      "properties": {
        "SourceCurrency": {
          "description": "Currency from which an amount is to be converted in a currency conversion.",
          "type": "string",
          "pattern": "^[A-Z]{3,3}$"
        },
        "TargetCurrency": {
          "description": "Currency from which an amount is to be converted in a currency conversion.",
          "type": "string",
          "pattern": "^[A-Z]{3,3}$"
        },
        "UnitCurrency": {
          "description": "Currency from which an amount is to be converted in a currency conversion.",
          "type": "string",
          "pattern": "^[A-Z]{3,3}$"
        },
        "ExchangeRate": {
          "description": "Factor used to convert an amount from one currency into another. This reflects the price at which one currency was bought with another currency.\nUsage: ExchangeRate expresses the ratio between UnitCurrency and QuotedCurrency (ExchangeRate = UnitCurrency/QuotedCurrency).",
          "type": "number"
        },
        "ContractIdentification": {
          "description": "Unique identification to unambiguously identify the foreign exchange contract.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "QuotationDate": {
          "description": "Date and time at which an exchange rate is quoted.\nAll dates in the JSON payloads are represented in ISO 8601 date-time format.\nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
          "type": "string",
          "format": "date-time"
        },
        "InstructedAmount": {
          "$ref": "./schemaData.json#/modelSchemas/InstructedAmount3"
        }
      },
      "required": [
        "SourceCurrency",
        "ExchangeRate"
      ]
    },
    "Data25": {
      "id": "Data25",
      "title": "Data25",
      "type": "object",
      "properties": {
        "StandingOrder": {
          "description": "StandingOrder",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/StandingOrderModel"
          }
        }
      }
    },
    "Data42": {
      "id": "Data42",
      "title": "Data42",
      "type": "object",
      "properties": {
        "Account": {
          "$ref": "./schemaData.json#/modelSchemas/AccountModel"
        }
      }
    },
    "Data52": {
      "id": "Data52",
      "title": "Data52",
      "type": "object",
      "properties": {
        "Balance": {
          "description": "Balance",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/BalanceModel"
          }
        }
      },
      "required": [
        "Balance"
      ]
    },
    "DebtorAgent2": {
      "id": "DebtorAgent2",
      "title": "DebtorAgent2",
      "type": "object",
      "properties": {
        "SchemeName": {
          "description": "Name of the identification scheme, in a coded form as published in an external list.",
          "type": "string",
          "enum": [
            "BICFI"
          ]
        },
        "Identification": {
          "description": "Unique and unambiguous identification of a financial institution or a branch of a financial institution.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        }
      },
      "required": [
        "SchemeName",
        "Identification"
      ]
    },
    "DeliveryAddress2": {
      "id": "DeliveryAddress2",
      "title": "DeliveryAddress2",
      "type": "object",
      "properties": {
        "AddressType": {
          "$ref": "./schemaData.json#/modelSchemas/AddressType"
        },
        "AddressLine": {
          "description": "Information that locates and identifies a specific address, as defined by postal services, that is presented in free format text.",
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1,
            "maxLength": 70
          },
          "minItems": 0,
          "maxItems": 5
        },
        "StreetName": {
          "description": "Name of a street or thoroughfare.",
          "type": "string",
          "minLength": 1,
          "maxLength": 70
        },
        "BuildingNumber": {
          "description": "Number that identifies the position of a building on a street.",
          "type": "string",
          "minLength": 1,
          "maxLength": 16
        },
        "PostCode": {
          "description": "Identifier consisting of a group of letters and/or numbers that is added to a postal address to assist the sorting of mail",
          "type": "string",
          "minLength": 1,
          "maxLength": 16
        },
        "TownName": {
          "description": "Name of a built-up area, with defined boundaries, and a local government.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "CountrySubDivision": {
          "description": "Identifies a subdivision of a country, for instance state, region, county.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "Country": {
          "description": "Nation with its own government, occupying a particular territory.",
          "type": "string",
          "pattern": "^[A-Z]{2,2}$"
        }
      },
      "required": [
        "Country"
      ]
    },
    "Links1": {
      "id": "Links1",
      "title": "Links1",
      "type": "object",
      "properties": {
        "Self": {
          "type": "string"
        },
        "First": {
          "type": "string"
        },
        "Prev": {
          "type": "string"
        },
        "Next": {
          "type": "string"
        },
        "Last": {
          "type": "string"
        }
      },
      "required": [
        "Self"
      ]
    },
    "PreviousPaymentAmount2": {
      "id": "PreviousPaymentAmount2",
      "title": "PreviousPaymentAmount2",
      "type": "object",
      "properties": {
        "Amount": {
          "type": "string",
          "pattern": "^\\d{1,13}\\.\\d{1,5}$"
        },
        "Currency": {
          "description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 'Codes for the representation of currencies and funds'",
          "type": "string",
          "pattern": "^[A-Z]{3,3}$"
        }
      },
      "required": [
        "Amount",
        "Currency"
      ]
    },
    "ProprietaryBankTransactionCode2": {
      "id": "ProprietaryBankTransactionCode2",
      "title": "ProprietaryBankTransactionCode2",
      "type": "object",
      "properties": {
        "Code": {
          "description": "Proprietary bank transaction code to identify the underlying transaction.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "Issuer": {
          "description": "Identification of the issuer of the proprietary bank transaction code.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        }
      },
      "required": [
        "Code"
      ]
    },
    "Reference": {
      "id": "Reference",
      "title": "Reference",
      "type": "object",
      "properties": {
        "CreditorName": {
          "type": "string",
          "maxLength": 20
        },
        "CreditorReference": {
          "$ref": "./schemaData.json#/modelSchemas/CreditorReference"
        },
        "DebtorName": {
          "type": "string",
          "maxLength": 20
        },
        "DebtorReference": {
          "$ref": "./schemaData.json#/modelSchemas/CreditorReference"
        }
      },
      "required": [
        "CreditorName"
      ]
    },
    "Statement": {
      "id": "Statement",
      "title": "Statement",
      "type": "object",
      "properties": {
        "AccountId": {
          "description": "A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.",
          "type": "string",
          "minLength": 1,
          "maxLength": 40
        },
        "StatementId": {
          "description": "Unique identifier for the statement resource within an servicing institution. This identifier is both unique and immutable.",
          "type": "string",
          "minLength": 1,
          "maxLength": 40
        },
        "StatementReference": {
          "description": "Unique reference for the statement. This reference may be optionally populated if available.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "Type": {
          "$ref": "./schemaData.json#/modelSchemas/Type3"
        },
        "StartDateTime": {
          "description": "Date and time at which the statement period starts.\nAll dates in the JSON payloads are represented in ISO 8601 date-time format.\nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
          "type": "string",
          "format": "date-time"
        },
        "EndDateTime": {
          "description": "Date and time at which the statement period ends.\nAll dates in the JSON payloads are represented in ISO 8601 date-time format.\nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
          "type": "string",
          "format": "date-time"
        },
        "CreationDateTime": {
          "description": "Date and time at which the resource was created.\nAll dates in the JSON payloads are represented in ISO 8601 date-time format.\nAll date-time fields in responses must include the timezone. An example is below:\n2017-04-05T10:43:07+00:00",
          "type": "string",
          "format": "date-time"
        },
        "StatementDescription": {
          "description": "Other descriptions that may be available for the statement resource.",
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1,
            "maxLength": 500
          }
        },
        "StatementBenefit": {
          "description": "Set of elements used to provide details of a benefit or reward amount for the statement resource.",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/StatementBenefit"
          }
        },
        "StatementFee": {
          "description": "Set of elements used to provide details of a fee for the statement resource.",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/StatementFee"
          }
        },
        "StatementInterest": {
          "description": "Set of elements used to provide details of a generic interest amount related to the statement resource.",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/StatementInterest"
          }
        },
        "StatementDateTime": {
          "description": "Set of elements used to provide details of a generic date time for the statement resource.",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/StatementDateTime"
          }
        },
        "StatementRate": {
          "description": "Set of elements used to provide details of a generic rate related to the statement resource.",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/StatementRate"
          }
        },
        "StatementValue": {
          "description": "Set of elements used to provide details of a generic number value related to the statement resource.",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/StatementValue"
          }
        },
        "StatementAmount": {
          "description": "Set of elements used to provide details of a generic amount for the statement resource.",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/StatementAmount"
          }
        }
      },
      "required": [
        "AccountId",
        "Type",
        "StartDateTime",
        "EndDateTime",
        "CreationDateTime"
      ]
    },
    "Amount10": {
      "id": "Amount10",
      "title": "Amount10",
      "type": "object",
      "properties": {
        "Amount": {
          "type": "string",
          "pattern": "^\\d{1,13}\\.\\d{1,5}$"
        },
        "Currency": {
          "description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 'Codes for the representation of currencies and funds'",
          "type": "string",
          "pattern": "^[A-Z]{3,3}$"
        }
      },
      "required": [
        "Amount",
        "Currency"
      ]
    },
    "Balance2": {
      "id": "Balance2",
      "title": "Balance2",
      "type": "object",
      "properties": {
        "Amount": {
          "$ref": "./schemaData.json#/modelSchemas/Amount10"
        },
        "CreditDebitIndicator": {
          "$ref": "./schemaData.json#/modelSchemas/CreditDebitIndicator"
        },
        "Type": {
          "$ref": "./schemaData.json#/modelSchemas/Type"
        }
      },
      "required": [
        "Amount",
        "CreditDebitIndicator",
        "Type"
      ]
    },
    "BankTransactionCode2": {
      "id": "BankTransactionCode2",
      "title": "BankTransactionCode2",
      "type": "object",
      "properties": {
        "Code": {
          "description": "Specifies the family within a domain.",
          "type": "string"
        },
        "SubCode": {
          "description": "Specifies the sub-product family within a specific family.",
          "type": "string"
        }
      },
      "required": [
        "Code",
        "SubCode"
      ]
    },
    "CreditorAccount5": {
      "id": "CreditorAccount5",
      "title": "CreditorAccount5",
      "type": "object",
      "properties": {
        "SchemeName": {
          "$ref": "./schemaData.json#/modelSchemas/AccountSchemeModel"
        },
        "Identification": {
          "description": "Identification assigned by an institution to identify an account. This identification is known by the account owner.",
          "type": "string",
          "minLength": 1,
          "maxLength": 34
        },
        "Name": {
          "description": "Name of the account, as assigned by the account servicing institution, in agreement with the account owner in order to provide an additional means of identification of the account.\nUsage: The account name is different from the account owner name. The account name is used in certain user communities to provide a means of identifying the account, in addition to the account owner's identity and the account number.",
          "type": "string",
          "minLength": 1,
          "maxLength": 70
        },
        "SecondaryIdentification": {
          "description": "This is secondary identification of the account, as assigned by the account servicing institution.",
          "type": "string",
          "minLength": 1,
          "maxLength": 34
        }
      },
      "required": [
        "SchemeName",
        "Identification"
      ]
    },
    "Data32": {
      "id": "Data32",
      "title": "Data32",
      "type": "object",
      "properties": {
        "Account": {
          "description": "Account",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/AccountModel"
          }
        }
      }
    },
    "Fee2": {
      "id": "Fee2",
      "title": "Fee2",
      "type": "object",
      "properties": {
        "Amount": {
          "type": "string",
          "pattern": "^\\d{1,13}\\.\\d{1,5}$"
        },
        "Currency": {
          "description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\".",
          "type": "string",
          "pattern": "^[A-Z]{3,3}$"
        }
      },
      "required": [
        "Amount",
        "Currency"
      ]
    },
    "InstructedAmount12": {
      "id": "InstructedAmount12",
      "title": "InstructedAmount12",
      "type": "object",
      "properties": {
        "Amount": {
          "type": "string",
          "pattern": "^\\d{1,13}\\.\\d{1,5}$"
        },
        "Currency": {
          "description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\".",
          "type": "string",
          "pattern": "^[A-Z]{3,3}$"
        }
      },
      "required": [
        "Amount",
        "Currency"
      ]
    },
    "NextPaymentAmount2": {
      "id": "NextPaymentAmount2",
      "title": "NextPaymentAmount2",
      "type": "object",
      "properties": {
        "Amount": {
          "type": "string",
          "pattern": "^\\d{1,13}\\.\\d{1,5}$"
        },
        "Currency": {
          "description": "A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 'Codes for the representation of currencies and funds'",
          "type": "string",
          "pattern": "^[A-Z]{3,3}$"
        }
      },
      "required": [
        "Amount",
        "Currency"
      ]
    },
    "Risk1": {
      "id": "Risk1",
      "title": "Risk1",
      "type": "object",
      "properties": {
        "GeoLocation": {
          "$ref": "./schemaData.json#/modelSchemas/GeoLocation2"
        },
        "PaymentContextCode": {
          "$ref": "./schemaData.json#/modelSchemas/PaymentContextCode"
        },
        "MerchantCategoryCode": {
          "description": "Category code conforms to ISO 18245, related to the type of services or goods the merchant provides for the transaction",
          "type": "string",
          "minLength": 3,
          "maxLength": 4
        },
        "MerchantCustomerIdentification": {
          "description": "The unique customer identifier of the Customer with the merchant.",
          "type": "string",
          "minLength": 1,
          "maxLength": 70
        },
        "DeliveryAddress": {
          "$ref": "./schemaData.json#/modelSchemas/DeliveryAddress2"
        },
        "EndUserAppName": {
          "description": "Name of the end user facing application",
          "type": "string",
          "minLength": 1,
          "maxLength": 70
        },
        "EndUserAppVersion": {
          "description": "Version of the end user facing application",
          "type": "string",
          "minLength": 1,
          "maxLength": 14
        },
        "MerchantName": {
          "description": "Name of the merchant",
          "type": "string",
          "minLength": 1,
          "maxLength": 70
        },
        "MerchantNZBN": {
          "description": "NZ business number for the merchant",
          "type": "string",
          "minLength": 1,
          "maxLength": 70
        }
      }
    },
    "TransactionReference": {
      "id": "TransactionReference",
      "title": "TransactionReference",
      "type": "object",
      "properties": {
        "CreditorName": {
          "type": "string",
          "maxLength": 20
        },
        "CreditorReference": {
          "$ref": "./schemaData.json#/modelSchemas/CreditorReference"
        },
        "DebtorName": {
          "type": "string",
          "maxLength": 20
        },
        "DebtorReference": {
          "$ref": "./schemaData.json#/modelSchemas/CreditorReference"
        }
      },
      "required": [
        "CreditorName"
      ]
    },
    "Accounts%20400%20Error": {
      "id": "Accounts 400 Error",
      "title": "Accounts 400 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20403%20Error": {
      "id": "Accounts 403 Error",
      "title": "Accounts 403 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20500%20Error": {
      "id": "Accounts 500 Error",
      "title": "Accounts 500 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20503%20Error": {
      "id": "Accounts 503 Error",
      "title": "Accounts 503 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Balances%20400%20Error": {
      "id": "Accounts Balances 400 Error",
      "title": "Accounts Balances 400 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Balances%20403%20Error": {
      "id": "Accounts Balances 403 Error",
      "title": "Accounts Balances 403 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Balances%20500%20Error": {
      "id": "Accounts Balances 500 Error",
      "title": "Accounts Balances 500 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Balances%20503%20Error": {
      "id": "Accounts Balances 503 Error",
      "title": "Accounts Balances 503 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Beneficiaries%20400%20Error": {
      "id": "Accounts Beneficiaries 400 Error",
      "title": "Accounts Beneficiaries 400 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Beneficiaries%20403%20Error": {
      "id": "Accounts Beneficiaries 403 Error",
      "title": "Accounts Beneficiaries 403 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Beneficiaries%20500%20Error": {
      "id": "Accounts Beneficiaries 500 Error",
      "title": "Accounts Beneficiaries 500 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Beneficiaries%20503%20Error": {
      "id": "Accounts Beneficiaries 503 Error",
      "title": "Accounts Beneficiaries 503 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Direct%20Debits%20400%20Error": {
      "id": "Accounts Direct Debits 400 Error",
      "title": "Accounts Direct Debits 400 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Direct%20Debits%20403%20Error": {
      "id": "Accounts Direct Debits 403 Error",
      "title": "Accounts Direct Debits 403 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Direct%20Debits%20500%20Error": {
      "id": "Accounts Direct Debits 500 Error",
      "title": "Accounts Direct Debits 500 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Direct%20Debits%20503%20Error": {
      "id": "Accounts Direct Debits 503 Error",
      "title": "Accounts Direct Debits 503 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Offers%20400%20Error": {
      "id": "Accounts Offers 400 Error",
      "title": "Accounts Offers 400 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Offers%20403%20Error": {
      "id": "Accounts Offers 403 Error",
      "title": "Accounts Offers 403 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Offers%20500%20Error": {
      "id": "Accounts Offers 500 Error",
      "title": "Accounts Offers 500 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Offers%20503%20Error": {
      "id": "Accounts Offers 503 Error",
      "title": "Accounts Offers 503 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Party%20400%20Error": {
      "id": "Accounts Party 400 Error",
      "title": "Accounts Party 400 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Party%20403%20Error": {
      "id": "Accounts Party 403 Error",
      "title": "Accounts Party 403 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Party%20500%20Error": {
      "id": "Accounts Party 500 Error",
      "title": "Accounts Party 500 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Party%20503%20Error": {
      "id": "Accounts Party 503 Error",
      "title": "Accounts Party 503 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Scheduled%20Payments%20400%20Error": {
      "id": "Accounts Scheduled Payments 400 Error",
      "title": "Accounts Scheduled Payments 400 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Scheduled%20Payments%20403%20Error": {
      "id": "Accounts Scheduled Payments 403 Error",
      "title": "Accounts Scheduled Payments 403 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Scheduled%20Payments%20500%20Error": {
      "id": "Accounts Scheduled Payments 500 Error",
      "title": "Accounts Scheduled Payments 500 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Scheduled%20Payments%20503%20Error": {
      "id": "Accounts Scheduled Payments 503 Error",
      "title": "Accounts Scheduled Payments 503 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Standing%20Orders%20400%20Error": {
      "id": "Accounts Standing Orders 400 Error",
      "title": "Accounts Standing Orders 400 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Standing%20Orders%20403%20Error": {
      "id": "Accounts Standing Orders 403 Error",
      "title": "Accounts Standing Orders 403 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Standing%20Orders%20500%20Error": {
      "id": "Accounts Standing Orders 500 Error",
      "title": "Accounts Standing Orders 500 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Standing%20Orders%20503%20Error": {
      "id": "Accounts Standing Orders 503 Error",
      "title": "Accounts Standing Orders 503 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Statements%20400%20Error": {
      "id": "Accounts Statements 400 Error",
      "title": "Accounts Statements 400 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Statements%20403%20Error": {
      "id": "Accounts Statements 403 Error",
      "title": "Accounts Statements 403 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Statements%20500%20Error": {
      "id": "Accounts Statements 500 Error",
      "title": "Accounts Statements 500 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Statements%20503%20Error": {
      "id": "Accounts Statements 503 Error",
      "title": "Accounts Statements 503 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Statements%20Transactions%20400%20Error": {
      "id": "Accounts Statements Transactions 400 Error",
      "title": "Accounts Statements Transactions 400 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Statements%20Transactions%20403%20Error": {
      "id": "Accounts Statements Transactions 403 Error",
      "title": "Accounts Statements Transactions 403 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Statements%20Transactions%20500%20Error": {
      "id": "Accounts Statements Transactions 500 Error",
      "title": "Accounts Statements Transactions 500 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Statements%20Transactions%20503%20Error": {
      "id": "Accounts Statements Transactions 503 Error",
      "title": "Accounts Statements Transactions 503 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Transactions%20400%20Error": {
      "id": "Accounts Transactions 400 Error",
      "title": "Accounts Transactions 400 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Transactions%20403%20Error": {
      "id": "Accounts Transactions 403 Error",
      "title": "Accounts Transactions 403 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Transactions%20500%20Error": {
      "id": "Accounts Transactions 500 Error",
      "title": "Accounts Transactions 500 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Accounts%20Transactions%20503%20Error": {
      "id": "Accounts Transactions 503 Error",
      "title": "Accounts Transactions 503 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Balances%20400%20Error": {
      "id": "Balances 400 Error",
      "title": "Balances 400 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Balances%20403%20Error": {
      "id": "Balances 403 Error",
      "title": "Balances 403 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Balances%20500%20Error": {
      "id": "Balances 500 Error",
      "title": "Balances 500 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Balances%20503%20Error": {
      "id": "Balances 503 Error",
      "title": "Balances 503 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Beneficiaries%20400%20Error": {
      "id": "Beneficiaries 400 Error",
      "title": "Beneficiaries 400 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Beneficiaries%20403%20Error": {
      "id": "Beneficiaries 403 Error",
      "title": "Beneficiaries 403 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Beneficiaries%20500%20Error": {
      "id": "Beneficiaries 500 Error",
      "title": "Beneficiaries 500 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Beneficiaries%20503%20Error": {
      "id": "Beneficiaries 503 Error",
      "title": "Beneficiaries 503 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Direct%20Debits%20400%20Error": {
      "id": "Direct Debits 400 Error",
      "title": "Direct Debits 400 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Direct%20Debits%20403%20Error": {
      "id": "Direct Debits 403 Error",
      "title": "Direct Debits 403 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Direct%20Debits%20500%20Error": {
      "id": "Direct Debits 500 Error",
      "title": "Direct Debits 500 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Direct%20Debits%20503%20Error": {
      "id": "Direct Debits 503 Error",
      "title": "Direct Debits 503 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Offers%20400%20Error": {
      "id": "Offers 400 Error",
      "title": "Offers 400 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Offers%20403%20Error": {
      "id": "Offers 403 Error",
      "title": "Offers 403 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Offers%20500%20Error": {
      "id": "Offers 500 Error",
      "title": "Offers 500 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Offers%20503%20Error": {
      "id": "Offers 503 Error",
      "title": "Offers 503 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Party%20400%20Error": {
      "id": "Party 400 Error",
      "title": "Party 400 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Party%20403%20Error": {
      "id": "Party 403 Error",
      "title": "Party 403 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Party%20500%20Error": {
      "id": "Party 500 Error",
      "title": "Party 500 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Party%20503%20Error": {
      "id": "Party 503 Error",
      "title": "Party 503 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Scheduled%20Payments%20400%20Error": {
      "id": "Scheduled Payments 400 Error",
      "title": "Scheduled Payments 400 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Scheduled%20Payments%20403%20Error": {
      "id": "Scheduled Payments 403 Error",
      "title": "Scheduled Payments 403 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Scheduled%20Payments%20500%20Error": {
      "id": "Scheduled Payments 500 Error",
      "title": "Scheduled Payments 500 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Scheduled%20Payments%20503%20Error": {
      "id": "Scheduled Payments 503 Error",
      "title": "Scheduled Payments 503 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Standing%20Orders%20400%20Error": {
      "id": "Standing Orders 400 Error",
      "title": "Standing Orders 400 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Standing%20Orders%20403%20Error": {
      "id": "Standing Orders 403 Error",
      "title": "Standing Orders 403 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Standing%20Orders%20500%20Error": {
      "id": "Standing Orders 500 Error",
      "title": "Standing Orders 500 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Standing%20Orders%20503%20Error": {
      "id": "Standing Orders 503 Error",
      "title": "Standing Orders 503 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Statements%20400%20Error": {
      "id": "Statements 400 Error",
      "title": "Statements 400 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Statements%20403%20Error": {
      "id": "Statements 403 Error",
      "title": "Statements 403 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Statements%20500%20Error": {
      "id": "Statements 500 Error",
      "title": "Statements 500 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Statements%20503%20Error": {
      "id": "Statements 503 Error",
      "title": "Statements 503 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Transactions%20400%20Error": {
      "id": "Transactions 400 Error",
      "title": "Transactions 400 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Transactions%20403%20Error": {
      "id": "Transactions 403 Error",
      "title": "Transactions 403 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Transactions%20500%20Error": {
      "id": "Transactions 500 Error",
      "title": "Transactions 500 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    },
    "Transactions%20503%20Error": {
      "id": "Transactions 503 Error",
      "title": "Transactions 503 Error",
      "type": "object",
      "properties": {
        "Code": {
          "description": "High level textual error code to help categorise the errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Id": {
          "description": "A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "Message": {
          "description": "Brief Error message. E.g., 'There is something wrong with the request parameters provided'",
          "type": "string",
          "minLength": 1,
          "maxLength": 500
        },
        "Errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "./schemaData.json#/modelSchemas/Error",
            "minProperties": 1
          },
          "minItems": 1
        }
      },
      "required": [
        "Code",
        "Message",
        "Errors"
      ]
    }
  }
}