/**
 * Account and Transaction API SpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { type CallToolResult } from '@modelcontextprotocol/sdk/types.js';
import {
  ApiError,
  type GetStatementsResponse,
} from 'account-and-transaction-api-specificationlib';
import { schemas } from '../../schema.js';
import { statementsController } from '../../sdk-client.js';
import { stringifyRawJson } from '../../utils.js';
import { type ToolDefinition } from '../index.js';

const getStatementsInputSchema = await schemas.loadSchema("Statements", "GetStatements");

interface GetStatementsMCPToolRequest {
  'fromStatementDateTime': string,
  'toStatementDateTime': string,
  'x-fapi-auth-date': string,
  'x-fapi-customer-ip-address': string,
  'x-fapi-interaction-id': string,
  'x-merchant-ip-address': string,
  'x-customer-user-agent': string,
}

async function executeGetStatements(
  req: GetStatementsMCPToolRequest
): Promise<CallToolResult> {
  try {
    const { result } = await statementsController.getStatements(
      req['fromStatementDateTime'],
      req['toStatementDateTime'],
      req['x-fapi-auth-date'],
      req['x-fapi-customer-ip-address'],
      req['x-fapi-interaction-id'],
      req['x-merchant-ip-address'],
      req['x-customer-user-agent']
    );
    return {
      content: [
        {
          type: "text",
          text: stringifyRawJson(result),
        },
      ],
    };
  } catch (error) {
    let errorMessage = "Something went wrong during tool execution.";
    if (error instanceof ApiError) {
      try {
        errorMessage =
          typeof error.body === "string"
            ? error.body
            : stringifyRawJson(error.body);
      } catch (stringifyError) {
        errorMessage = `API error occurred, but details could not be serialized. Message: ${stringifyError}`;
      }
      console.error("API Error:", error.body);
    } else {
      console.error("Unexpected Tool Error:", error);
      if (error instanceof Error) {
        errorMessage = error.message;
      }
    }
    return {
      content: [{ type: "text", text: `Tool Error: ${errorMessage}` }],
      isError: true, // Indicate to the LLM that the tool failed
    };
  }
}

export async function handleGetStatements(
  args: unknown | GetStatementsMCPToolRequest
): Promise<CallToolResult> {
  const validationSummary = schemas.validate(args, "Statements", "GetStatements");
  if (!validationSummary.isValid) {
    if (validationSummary.errors) {
      return {
        content: validationSummary.errors,
        isError: true,
      };
    }

    return {
      content: [{ type: "text", text: "Invalid arguments for getStatements tool." }],
      isError: true,
    };
  }

  return await executeGetStatements(args as GetStatementsMCPToolRequest);
}

export const getStatementsTool: ToolDefinition = {
  tool: {
    name: "statements-getStatements",
    description: "Get Statements",
    inputSchema: getStatementsInputSchema,
  },
  handler: handleGetStatements,
};
